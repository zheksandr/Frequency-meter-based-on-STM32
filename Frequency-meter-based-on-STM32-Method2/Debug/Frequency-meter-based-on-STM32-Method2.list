
Frequency-meter-based-on-STM32-Method2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad0  08004ad0  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad8  08004ad8  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004adc  08004adc  00005adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004ae0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08004afc  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004afc  0000617c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f5c  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  00016fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00019350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce2  00000000  00000000  0001a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223c7  00000000  00000000  0001b07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142d4  00000000  00000000  0003d441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3066  00000000  00000000  00051715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012477b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  001247c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00128d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a84 	.word	0x08004a84

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08004a84 	.word	0x08004a84

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004fe:	4a38      	ldr	r2, [pc, #224]	@ (80005e0 <HD44780_Init+0xec>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000504:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <HD44780_Init+0xf0>)
 8000506:	2208      	movs	r2, #8
 8000508:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800050a:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <HD44780_Init+0xf4>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000510:	4b33      	ldr	r3, [pc, #204]	@ (80005e0 <HD44780_Init+0xec>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d907      	bls.n	8000528 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000518:	4b33      	ldr	r3, [pc, #204]	@ (80005e8 <HD44780_Init+0xf4>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <HD44780_Init+0xf4>)
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e006      	b.n	8000536 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000528:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <HD44780_Init+0xf4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <HD44780_Init+0xf4>)
 8000534:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000536:	f000 f993 	bl	8000860 <DelayInit>
  HAL_Delay(50);
 800053a:	2032      	movs	r0, #50	@ 0x32
 800053c:	f000 ff7e 	bl	800143c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <HD44780_Init+0xf0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f951 	bl	80007ec <ExpanderWrite>
  HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054e:	f000 ff75 	bl	800143c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000552:	2030      	movs	r0, #48	@ 0x30
 8000554:	f000 f938 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000558:	f241 1094 	movw	r0, #4500	@ 0x1194
 800055c:	f000 f9aa 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 8000560:	2030      	movs	r0, #48	@ 0x30
 8000562:	f000 f931 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000566:	f241 1094 	movw	r0, #4500	@ 0x1194
 800056a:	f000 f9a3 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 800056e:	2030      	movs	r0, #48	@ 0x30
 8000570:	f000 f92a 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000574:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000578:	f000 f99c 	bl	80008b4 <DelayUS>

  Write4Bits(0x02 << 4);
 800057c:	2020      	movs	r0, #32
 800057e:	f000 f923 	bl	80007c8 <Write4Bits>
  DelayUS(100);
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f000 f996 	bl	80008b4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <HD44780_Init+0xf4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f8db 	bl	800074e <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <HD44780_Init+0xf8>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800059e:	f000 f875 	bl	800068c <HD44780_Display>
  HD44780_Clear();
 80005a2:	f000 f82b 	bl	80005fc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HD44780_Init+0xfc>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005ac:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <HD44780_Init+0xfc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8c9 	bl	800074e <SendCommand>
  DelayUS(4500);
 80005bc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005c0:	f000 f978 	bl	80008b4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005c4:	490b      	ldr	r1, [pc, #44]	@ (80005f4 <HD44780_Init+0x100>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f876 	bl	80006b8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005cc:	490a      	ldr	r1, [pc, #40]	@ (80005f8 <HD44780_Init+0x104>)
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f872 	bl	80006b8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005d4:	f000 f81d 	bl	8000612 <HD44780_Home>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000003b 	.word	0x2000003b
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000038 	.word	0x20000038
 80005ec:	20000039 	.word	0x20000039
 80005f0:	2000003a 	.word	0x2000003a
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008

080005fc <HD44780_Clear>:

void HD44780_Clear()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f8a4 	bl	800074e <SendCommand>
  DelayUS(2000);
 8000606:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800060a:	f000 f953 	bl	80008b4 <DelayUS>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <HD44780_Home>:

void HD44780_Home()
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000616:	2002      	movs	r0, #2
 8000618:	f000 f899 	bl	800074e <SendCommand>
  DelayUS(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000620:	f000 f948 	bl	80008b4 <DelayUS>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HD44780_SetCursor+0x5c>)
 800063a:	f107 0408 	add.w	r4, r7, #8
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <HD44780_SetCursor+0x60>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	429a      	cmp	r2, r3
 800064c:	d303      	bcc.n	8000656 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HD44780_SetCursor+0x60>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	3318      	adds	r3, #24
 800065c:	443b      	add	r3, r7
 800065e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4413      	add	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f86a 	bl	800074e <SendCommand>
}
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	bf00      	nop
 8000684:	08004a9c 	.word	0x08004a9c
 8000688:	2000003b 	.word	0x2000003b

0800068c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HD44780_Display+0x28>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HD44780_Display+0x28>)
 800069c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HD44780_Display+0x28>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f850 	bl	800074e <SendCommand>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000039 	.word	0x20000039

080006b8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f837 	bl	800074e <SendCommand>
  for (int i=0; i<8; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e009      	b.n	80006fa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f83b 	bl	800076a <SendChar>
  for (int i=0; i<8; i++)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	ddf2      	ble.n	80006e6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f827 	bl	800076a <SendChar>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072c:	e006      	b.n	800073c <HD44780_PrintStr+0x18>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f817 	bl	800076a <SendChar>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <HD44780_PrintStr+0xa>
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f812 	bl	8000786 <Send>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SendChar>:

static void SendChar(uint8_t ch)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f804 	bl	8000786 <Send>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	460a      	mov	r2, r1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4613      	mov	r3, r2
 8000794:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f023 030f 	bic.w	r3, r3, #15
 800079c:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f80b 	bl	80007c8 <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f804 	bl	80007c8 <Write4Bits>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f809 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f821 	bl	8000824 <PulseEnable>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	@ 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	@ (8000820 <ExpanderWrite+0x34>)
 8000810:	f001 fa22 	bl	8001c58 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000003c 	.word	0x2000003c
 8000820:	20000040 	.word	0x20000040

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f839 	bl	80008b4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82f 	bl	80008b4 <DelayUS>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <DelayInit+0x4c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <DelayInit+0x4c>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <DelayInit+0x4c>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <DelayInit+0x4c>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <DelayInit+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <DelayInit+0x50>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <DelayInit+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <DelayInit+0x50>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <DelayInit+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000edf0 	.word	0xe000edf0
 80008b0:	e0001000 	.word	0xe0001000

080008b4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <DelayUS+0x44>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <DelayUS+0x48>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9a      	lsrs	r2, r3, #18
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <DelayUS+0x4c>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <DelayUS+0x4c>)
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f6      	bhi.n	80008d6 <DelayUS+0x22>
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000010 	.word	0x20000010
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	e0001000 	.word	0xe0001000

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fd26 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f81c 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f9ee 	bl	8000cf0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000914:	f000 f8b8 	bl	8000a88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000918:	f000 f956 	bl	8000bc8 <MX_TIM2_Init>
  MX_I2C1_Init();
 800091c:	f000 f886 	bl	8000a2c <MX_I2C1_Init>
  MX_UART4_Init();
 8000920:	f000 f9bc 	bl	8000c9c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fde5 	bl	80004f4 <HD44780_Init>
  HD44780_Clear();
 800092a:	f7ff fe67 	bl	80005fc <HD44780_Clear>
  HAL_TIM_Base_Start(&htim2);
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <main+0x3c>)
 8000930:	f002 fb74 	bl	800301c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000934:	2100      	movs	r1, #0
 8000936:	4803      	ldr	r0, [pc, #12]	@ (8000944 <main+0x40>)
 8000938:	f002 fc32 	bl	80031a0 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <main+0x38>
 8000940:	200000dc 	.word	0x200000dc
 8000944:	20000094 	.word	0x20000094

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2234      	movs	r2, #52	@ 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f004 f85a 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <SystemClock_Config+0xdc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a2b      	ldr	r2, [pc, #172]	@ (8000a24 <SystemClock_Config+0xdc>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <SystemClock_Config+0xdc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <SystemClock_Config+0xe0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a25      	ldr	r2, [pc, #148]	@ (8000a28 <SystemClock_Config+0xe0>)
 8000992:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <SystemClock_Config+0xe0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009bc:	23b4      	movs	r3, #180	@ 0xb4
 80009be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 f835 	bl	8002a40 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009dc:	f000 f9e2 	bl	8000da4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e0:	f001 fc94 	bl	800230c <HAL_PWREx_EnableOverDrive>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ea:	f000 f9db 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fccd 	bl	80023ac <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a18:	f000 f9c4 	bl	8000da4 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	@ 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <MX_I2C1_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_I2C1_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a6a:	f000 ffb1 	bl	80019d0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f996 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000040 	.word	0x20000040
 8000a80:	40005400 	.word	0x40005400
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b096      	sub	sp, #88	@ 0x58
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2220      	movs	r2, #32
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 ffa5 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc4 <MX_TIM1_Init+0x13c>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 8000acc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000ace:	f244 624f 	movw	r2, #17999	@ 0x464f
 8000ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000ada:	4b39      	ldr	r3, [pc, #228]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000adc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b37      	ldr	r3, [pc, #220]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae8:	4b35      	ldr	r3, [pc, #212]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aee:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af4:	4832      	ldr	r0, [pc, #200]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000af6:	f002 fa41 	bl	8002f7c <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 f950 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482b      	ldr	r0, [pc, #172]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000b12:	f002 fda7 	bl	8003664 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f942 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b20:	4827      	ldr	r0, [pc, #156]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000b22:	f002 fae3 	bl	80030ec <HAL_TIM_OC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b2c:	f000 f93a 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b30:	2320      	movs	r3, #32
 8000b32:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4820      	ldr	r0, [pc, #128]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000b40:	f003 fa78 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b4a:	f000 f92b 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10000-3;
 8000b52:	f242 730d 	movw	r3, #9997	@ 0x270d
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000b76:	f002 fd19 	bl	80035ac <HAL_TIM_OC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b80:	f000 f910 	bl	8000da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <MX_TIM1_Init+0x138>)
 8000ba8:	f003 fac0 	bl	800412c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000bb2:	f000 f8f7 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	3758      	adds	r7, #88	@ 0x58
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000094 	.word	0x20000094
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c08:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1c:	481e      	ldr	r0, [pc, #120]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c1e:	f002 f9ad 	bl	8002f7c <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c28:	f000 f8bc 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4619      	mov	r1, r3
 8000c44:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c46:	f002 fd0d 	bl	8003664 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f8a8 	bl	8000da4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c54:	2304      	movs	r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c64:	f002 fdc5 	bl	80037f2 <HAL_TIM_SlaveConfigSynchro>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000c6e:	f000 f899 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_TIM2_Init+0xd0>)
 8000c80:	f003 f9d8 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000c8a:	f000 f88b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000dc 	.word	0x200000dc

08000c9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <MX_UART4_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000ca8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_UART4_Init+0x4c>)
 8000cd4:	f003 fa90 	bl	80041f8 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f861 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000124 	.word	0x20000124
 8000cec:	40004c00 	.word	0x40004c00

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_GPIO_Init+0xac>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MX_GPIO_Init+0xb0>)
 8000d8e:	f000 fc8b 	bl	80016a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dee:	2007      	movs	r0, #7
 8000df0:	f000 fc18 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e50:	2304      	movs	r3, #4
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <HAL_I2C_MspInit+0x8c>)
 8000e5c:	f000 fc24 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a2f      	ldr	r2, [pc, #188]	@ (8000f6c <HAL_TIM_Base_MspInit+0xdc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11e      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a2d      	ldr	r2, [pc, #180]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2019      	movs	r0, #25
 8000ed4:	f000 fbb1 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ed8:	2019      	movs	r0, #25
 8000eda:	f000 fbca 	bl	8001672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201b      	movs	r0, #27
 8000ee4:	f000 fba9 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ee8:	201b      	movs	r0, #27
 8000eea:	f000 fbc2 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eee:	e038      	b.n	8000f62 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d133      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a1b      	ldr	r2, [pc, #108]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_TIM_Base_MspInit+0xe0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f32:	2320      	movs	r3, #32
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f42:	2301      	movs	r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <HAL_TIM_Base_MspInit+0xe4>)
 8000f4e:	f000 fbab 	bl	80016a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201c      	movs	r0, #28
 8000f58:	f000 fb6f 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f000 fb88 	bl	8001672 <HAL_NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <HAL_UART_MspInit+0x8c>)
 8000fee:	f000 fb5b 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	@ 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40004c00 	.word	0x40004c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <SendDataLCDUSB>:


uint8_t  f_lenght = 0;
uint32_t temp = 0;
extern UART_HandleTypeDef huart4;
void SendDataLCDUSB(uint32_t frequency){
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800100c:	b08d      	sub	sp, #52	@ 0x34
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
	  temp = frequency;
 8001012:	4a7f      	ldr	r2, [pc, #508]	@ (8001210 <SendDataLCDUSB+0x208>)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6013      	str	r3, [r2, #0]
	  f_lenght = 0;
 8001018:	4b7e      	ldr	r3, [pc, #504]	@ (8001214 <SendDataLCDUSB+0x20c>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
	  HD44780_Clear();
 800101e:	f7ff faed 	bl	80005fc <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8001022:	2100      	movs	r1, #0
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff faff 	bl	8000628 <HD44780_SetCursor>
	  while (temp){
 800102a:	e00d      	b.n	8001048 <SendDataLCDUSB+0x40>
		  temp /= 10;
 800102c:	4b78      	ldr	r3, [pc, #480]	@ (8001210 <SendDataLCDUSB+0x208>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a79      	ldr	r2, [pc, #484]	@ (8001218 <SendDataLCDUSB+0x210>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	4a75      	ldr	r2, [pc, #468]	@ (8001210 <SendDataLCDUSB+0x208>)
 800103a:	6013      	str	r3, [r2, #0]
		  f_lenght++;
 800103c:	4b75      	ldr	r3, [pc, #468]	@ (8001214 <SendDataLCDUSB+0x20c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b73      	ldr	r3, [pc, #460]	@ (8001214 <SendDataLCDUSB+0x20c>)
 8001046:	701a      	strb	r2, [r3, #0]
	  while (temp){
 8001048:	4b71      	ldr	r3, [pc, #452]	@ (8001210 <SendDataLCDUSB+0x208>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ed      	bne.n	800102c <SendDataLCDUSB+0x24>
	  }
	  if (f_lenght){
 8001050:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <SendDataLCDUSB+0x20c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80d6 	beq.w	8001206 <SendDataLCDUSB+0x1fe>
 800105a:	466b      	mov	r3, sp
 800105c:	461e      	mov	r6, r3
	  uint8_t Frequency_Buff[f_lenght];
 800105e:	4b6d      	ldr	r3, [pc, #436]	@ (8001214 <SendDataLCDUSB+0x20c>)
 8001060:	7819      	ldrb	r1, [r3, #0]
 8001062:	460b      	mov	r3, r1
 8001064:	3b01      	subs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	b2cb      	uxtb	r3, r1
 800106a:	2200      	movs	r2, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	00c3      	lsls	r3, r0, #3
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	00c2      	lsls	r2, r0, #3
 8001086:	b2cb      	uxtb	r3, r1
 8001088:	2200      	movs	r2, #0
 800108a:	469a      	mov	sl, r3
 800108c:	4693      	mov	fp, r2
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800109a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800109e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010a2:	460b      	mov	r3, r1
 80010a4:	3307      	adds	r3, #7
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	ebad 0d03 	sub.w	sp, sp, r3
 80010ae:	466b      	mov	r3, sp
 80010b0:	3300      	adds	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
	  unsigned char send_Buff_UART[f_lenght+5];
 80010b4:	4b57      	ldr	r3, [pc, #348]	@ (8001214 <SendDataLCDUSB+0x20c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	1d59      	adds	r1, r3, #5
 80010ba:	1e4b      	subs	r3, r1, #1
 80010bc:	61bb      	str	r3, [r7, #24]
 80010be:	460a      	mov	r2, r1
 80010c0:	2300      	movs	r3, #0
 80010c2:	4690      	mov	r8, r2
 80010c4:	4699      	mov	r9, r3
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010da:	460a      	mov	r2, r1
 80010dc:	2300      	movs	r3, #0
 80010de:	4614      	mov	r4, r2
 80010e0:	461d      	mov	r5, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	00eb      	lsls	r3, r5, #3
 80010ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f0:	00e2      	lsls	r2, r4, #3
 80010f2:	460b      	mov	r3, r1
 80010f4:	3307      	adds	r3, #7
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	ebad 0d03 	sub.w	sp, sp, r3
 80010fe:	466b      	mov	r3, sp
 8001100:	3300      	adds	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
	  for (int i = 0; i < f_lenght; i++){
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001108:	e01a      	b.n	8001140 <SendDataLCDUSB+0x138>
		  Frequency_Buff[i] = frequency % 10 + 48;
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <SendDataLCDUSB+0x210>)
 800110e:	fba3 2301 	umull	r2, r3, r3, r1
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	1aca      	subs	r2, r1, r3
 800111e:	b2d3      	uxtb	r3, r2
 8001120:	3330      	adds	r3, #48	@ 0x30
 8001122:	b2d9      	uxtb	r1, r3
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001128:	4413      	add	r3, r2
 800112a:	460a      	mov	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
		  frequency /= 10;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4a39      	ldr	r2, [pc, #228]	@ (8001218 <SendDataLCDUSB+0x210>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < f_lenght; i++){
 800113a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113c:	3301      	adds	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <SendDataLCDUSB+0x20c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001148:	4293      	cmp	r3, r2
 800114a:	dbde      	blt.n	800110a <SendDataLCDUSB+0x102>
	  }
	  uint8_t start = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  uint8_t end = f_lenght - 1;
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <SendDataLCDUSB+0x20c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	  uint8_t temp;
	  while (start < end) {
 800115c:	e01b      	b.n	8001196 <SendDataLCDUSB+0x18e>
	      temp = Frequency_Buff[start];
 800115e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	74fb      	strb	r3, [r7, #19]
	      Frequency_Buff[start] = Frequency_Buff[end];
 8001168:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800116c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001170:	69f9      	ldr	r1, [r7, #28]
 8001172:	5c89      	ldrb	r1, [r1, r2]
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	54d1      	strb	r1, [r2, r3]
	      Frequency_Buff[end] = temp;
 8001178:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	7cf9      	ldrb	r1, [r7, #19]
 8001180:	54d1      	strb	r1, [r2, r3]
          start++;
 8001182:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001186:	3301      	adds	r3, #1
 8001188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
          end--;
 800118c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001190:	3b01      	subs	r3, #1
 8001192:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	  while (start < end) {
 8001196:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800119a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3dd      	bcc.n	800115e <SendDataLCDUSB+0x156>
      }
	  memcpy(send_Buff_UART,Frequency_Buff,f_lenght);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <SendDataLCDUSB+0x20c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	69f9      	ldr	r1, [r7, #28]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f003 fc5c 	bl	8004a68 <memcpy>
      memcpy(send_Buff_UART+f_lenght,"HZ\r\n",5);
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <SendDataLCDUSB+0x20c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4413      	add	r3, r2
 80011ba:	2205      	movs	r2, #5
 80011bc:	4917      	ldr	r1, [pc, #92]	@ (800121c <SendDataLCDUSB+0x214>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fc52 	bl	8004a68 <memcpy>
	  for (int i = 0; i < f_lenght; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c8:	e009      	b.n	80011de <SendDataLCDUSB+0x1d6>
		  HD44780_PrintSpecialChar(Frequency_Buff[i]);
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa99 	bl	800070a <HD44780_PrintSpecialChar>
	  for (int i = 0; i < f_lenght; i++){
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <SendDataLCDUSB+0x20c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dbef      	blt.n	80011ca <SendDataLCDUSB+0x1c2>
	  }
	  HD44780_PrintStr("HZ");
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <SendDataLCDUSB+0x218>)
 80011ec:	f7ff fa9a 	bl	8000724 <HD44780_PrintStr>
	  HAL_UART_Transmit(&huart4, send_Buff_UART,(uint16_t) (f_lenght+5), HAL_MAX_DELAY);
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <SendDataLCDUSB+0x20c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3305      	adds	r3, #5
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	6979      	ldr	r1, [r7, #20]
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <SendDataLCDUSB+0x21c>)
 8001200:	f003 f84a 	bl	8004298 <HAL_UART_Transmit>
 8001204:	46b5      	mov	sp, r6
	  }
}
 8001206:	bf00      	nop
 8001208:	3734      	adds	r7, #52	@ 0x34
 800120a:	46bd      	mov	sp, r7
 800120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001210:	20000170 	.word	0x20000170
 8001214:	2000016c 	.word	0x2000016c
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	08004aac 	.word	0x08004aac
 8001220:	08004ab4 	.word	0x08004ab4
 8001224:	20000124 	.word	0x20000124

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 f8bd 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800128e:	f002 f89d 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000094 	.word	0x20000094

0800129c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  freq = __HAL_TIM_GET_COUNTER(&htim2);
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <TIM1_CC_IRQHandler+0x24>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <TIM1_CC_IRQHandler+0x28>)
 80012a8:	6013      	str	r3, [r2, #0]
  SendDataLCDUSB(freq);
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <TIM1_CC_IRQHandler+0x28>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff feaa 	bl	8001008 <SendDataLCDUSB>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <TIM1_CC_IRQHandler+0x2c>)
 80012b6:	f002 f889 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000dc 	.word	0x200000dc
 80012c4:	20000174 	.word	0x20000174
 80012c8:	20000094 	.word	0x20000094

080012cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <TIM2_IRQHandler+0x10>)
 80012d2:	f002 f87b 	bl	80033cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000dc 	.word	0x200000dc

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800133c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001308:	f7ff ffea 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130e:	490d      	ldr	r1, [pc, #52]	@ (8001344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001324:	4c0a      	ldr	r4, [pc, #40]	@ (8001350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001332:	f003 fb75 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff fae5 	bl	8000904 <main>
  bx  lr    
 800133a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001348:	08004ae0 	.word	0x08004ae0
  ldr r2, =_sbss
 800134c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001350:	2000017c 	.word	0x2000017c

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <HAL_Init+0x40>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <HAL_Init+0x40>)
 800136e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <HAL_Init+0x40>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f94f 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fd10 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f967 	bl	800168e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f92f 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000010 	.word	0x20000010
 80013f4:	20000018 	.word	0x20000018
 80013f8:	20000014 	.word	0x20000014

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000018 	.word	0x20000018
 8001420:	20000178 	.word	0x20000178

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000178 	.word	0x20000178

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000018 	.word	0x20000018

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	@ (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	@ (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e165      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8154 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80ae 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	4a5c      	ldr	r2, [pc, #368]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800183c:	6453      	str	r3, [r2, #68]	@ 0x44
 800183e:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <HAL_GPIO_Init+0x300>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <HAL_GPIO_Init+0x304>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	@ (80019b0 <HAL_GPIO_Init+0x308>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	@ (80019b4 <HAL_GPIO_Init+0x30c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_GPIO_Init+0x310>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	@ (80019c0 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x20a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x206>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	@ (80019c8 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x202>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	@ (80019ac <HAL_GPIO_Init+0x304>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <HAL_GPIO_Init+0x324>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a31      	ldr	r2, [pc, #196]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_GPIO_Init+0x324>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a26      	ldr	r2, [pc, #152]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1c      	ldr	r2, [pc, #112]	@ (80019cc <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a11      	ldr	r2, [pc, #68]	@ (80019cc <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae96 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e12b      	b.n	8001c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fa02 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2224      	movs	r2, #36	@ 0x24
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a34:	f000 fdac 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a81      	ldr	r2, [pc, #516]	@ (8001c44 <HAL_I2C_Init+0x274>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d807      	bhi.n	8001a54 <HAL_I2C_Init+0x84>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a80      	ldr	r2, [pc, #512]	@ (8001c48 <HAL_I2C_Init+0x278>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	bf94      	ite	ls
 8001a4c:	2301      	movls	r3, #1
 8001a4e:	2300      	movhi	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e006      	b.n	8001a62 <HAL_I2C_Init+0x92>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a7d      	ldr	r2, [pc, #500]	@ (8001c4c <HAL_I2C_Init+0x27c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bf94      	ite	ls
 8001a5c:	2301      	movls	r3, #1
 8001a5e:	2300      	movhi	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0e7      	b.n	8001c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4a78      	ldr	r2, [pc, #480]	@ (8001c50 <HAL_I2C_Init+0x280>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9b      	lsrs	r3, r3, #18
 8001a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	@ (8001c44 <HAL_I2C_Init+0x274>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d802      	bhi.n	8001aa4 <HAL_I2C_Init+0xd4>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	e009      	b.n	8001ab8 <HAL_I2C_Init+0xe8>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	4a69      	ldr	r2, [pc, #420]	@ (8001c54 <HAL_I2C_Init+0x284>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	495c      	ldr	r1, [pc, #368]	@ (8001c44 <HAL_I2C_Init+0x274>)
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d819      	bhi.n	8001b0c <HAL_I2C_Init+0x13c>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e59      	subs	r1, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001aec:	400b      	ands	r3, r1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_I2C_Init+0x138>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1e59      	subs	r1, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b06:	e051      	b.n	8001bac <HAL_I2C_Init+0x1dc>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e04f      	b.n	8001bac <HAL_I2C_Init+0x1dc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_I2C_Init+0x168>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e012      	b.n	8001b5e <HAL_I2C_Init+0x18e>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Init+0x196>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e022      	b.n	8001bac <HAL_I2C_Init+0x1dc>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <HAL_I2C_Init+0x1bc>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e58      	subs	r0, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b8a:	e00f      	b.n	8001bac <HAL_I2C_Init+0x1dc>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e58      	subs	r0, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	0099      	lsls	r1, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	6809      	ldr	r1, [r1, #0]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6911      	ldr	r1, [r2, #16]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	000186a0 	.word	0x000186a0
 8001c48:	001e847f 	.word	0x001e847f
 8001c4c:	003d08ff 	.word	0x003d08ff
 8001c50:	431bde83 	.word	0x431bde83
 8001c54:	10624dd3 	.word	0x10624dd3

08001c58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fbda 	bl	8001424 <HAL_GetTick>
 8001c70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	f040 80e0 	bne.w	8001e40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2319      	movs	r3, #25
 8001c86:	2201      	movs	r2, #1
 8001c88:	4970      	ldr	r1, [pc, #448]	@ (8001e4c <HAL_I2C_Master_Transmit+0x1f4>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f964 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0d3      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0x50>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e0cc      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d007      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2221      	movs	r2, #33	@ 0x21
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	@ (8001e50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f89c 	bl	8001e54 <I2C_MasterRequestWrite>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08d      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d3c:	e066      	b.n	8001e0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fa22 	bl	800218c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d107      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06b      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0x188>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	6a39      	ldr	r1, [r7, #32]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fa19 	bl	800221c <I2C_WaitOnBTFFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d107      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e01a      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d194      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	00100002 	.word	0x00100002
 8001e50:	ffff0000 	.word	0xffff0000

08001e54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	460b      	mov	r3, r1
 8001e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d006      	beq.n	8001e7e <I2C_MasterRequestWrite+0x2a>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d003      	beq.n	8001e7e <I2C_MasterRequestWrite+0x2a>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e7c:	d108      	bne.n	8001e90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e00b      	b.n	8001ea8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d107      	bne.n	8001ea8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f84f 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ece:	d103      	bne.n	8001ed8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e035      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee4:	d108      	bne.n	8001ef8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	e01b      	b.n	8001f30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	11db      	asrs	r3, r3, #7
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0306 	and.w	r3, r3, #6
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f063 030f 	orn	r3, r3, #15
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	490e      	ldr	r1, [pc, #56]	@ (8001f50 <I2C_MasterRequestWrite+0xfc>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f898 	bl	800204c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e010      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4907      	ldr	r1, [pc, #28]	@ (8001f54 <I2C_MasterRequestWrite+0x100>)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f888 	bl	800204c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	00010008 	.word	0x00010008
 8001f54:	00010002 	.word	0x00010002

08001f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	e048      	b.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d044      	beq.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f72:	f7ff fa57 	bl	8001424 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d302      	bcc.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d139      	bne.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	e00c      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d116      	bne.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e023      	b.n	8002044 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0c1b      	lsrs	r3, r3, #16
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10d      	bne.n	8002022 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	43da      	mvns	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4013      	ands	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	e00c      	b.n	800203c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	43da      	mvns	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4013      	ands	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	429a      	cmp	r2, r3
 8002040:	d093      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800205a:	e071      	b.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206a:	d123      	bne.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e067      	b.n	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d041      	beq.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020bc:	f7ff f9b2 	bl	8001424 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d302      	bcc.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d136      	bne.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10c      	bne.n	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	e00b      	b.n	800210e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e021      	b.n	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10c      	bne.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e00b      	b.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4013      	ands	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f af6d 	bne.w	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002198:	e034      	b.n	8002204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f886 	bl	80022ac <I2C_IsAcknowledgeFailed>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e034      	b.n	8002214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d028      	beq.n	8002204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff f937 	bl	8001424 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11d      	bne.n	8002204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	2b80      	cmp	r3, #128	@ 0x80
 80021d4:	d016      	beq.n	8002204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e007      	b.n	8002214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	2b80      	cmp	r3, #128	@ 0x80
 8002210:	d1c3      	bne.n	800219a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002228:	e034      	b.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f83e 	bl	80022ac <I2C_IsAcknowledgeFailed>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e034      	b.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d028      	beq.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff f8ef 	bl	8001424 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d11d      	bne.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d016      	beq.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e007      	b.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d1c3      	bne.n	800222a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c2:	d11b      	bne.n	80022fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_PWREx_EnableOverDrive+0x90>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <HAL_PWREx_EnableOverDrive+0x90>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_PWREx_EnableOverDrive+0x90>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff f874 	bl	8001424 <HAL_GetTick>
 800233c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800233e:	e009      	b.n	8002354 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002340:	f7ff f870 	bl	8001424 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800234e:	d901      	bls.n	8002354 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e01f      	b.n	8002394 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002360:	d1ee      	bne.n	8002340 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7ff f85c 	bl	8001424 <HAL_GetTick>
 800236c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800236e:	e009      	b.n	8002384 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002370:	f7ff f858 	bl	8001424 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800237e:	d901      	bls.n	8002384 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e007      	b.n	8002394 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002384:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002390:	d1ee      	bne.n	8002370 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	420e0040 	.word	0x420e0040
 80023a4:	40007000 	.word	0x40007000
 80023a8:	420e0044 	.word	0x420e0044

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cc      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b68      	ldr	r3, [pc, #416]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d90c      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b65      	ldr	r3, [pc, #404]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a58      	ldr	r2, [pc, #352]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a52      	ldr	r2, [pc, #328]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d044      	beq.n	80024cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d119      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d003      	beq.n	800246a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	2b03      	cmp	r3, #3
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	4b3f      	ldr	r3, [pc, #252]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e067      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b37      	ldr	r3, [pc, #220]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4934      	ldr	r1, [pc, #208]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe ffc2 	bl	8001424 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe ffbe 	bl	8001424 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d20c      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f855 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	@ (800256c <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe ff22 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08004ab8 	.word	0x08004ab8
 8002570:	20000010 	.word	0x20000010
 8002574:	20000014 	.word	0x20000014

08002578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_RCC_GetHCLKFreq+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000010 	.word	0x20000010

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002594:	f7ff fff0 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0a9b      	lsrs	r3, r3, #10
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	08004ac8 	.word	0x08004ac8

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025bc:	f7ff ffdc 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0b5b      	lsrs	r3, r3, #13
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08004ac8 	.word	0x08004ac8

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b0ae      	sub	sp, #184	@ 0xb8
 80025e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4bcb      	ldr	r3, [pc, #812]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b0c      	cmp	r3, #12
 8002610:	f200 8206 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x440>
 8002614:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002651 	.word	0x08002651
 8002620:	08002a21 	.word	0x08002a21
 8002624:	08002a21 	.word	0x08002a21
 8002628:	08002a21 	.word	0x08002a21
 800262c:	08002659 	.word	0x08002659
 8002630:	08002a21 	.word	0x08002a21
 8002634:	08002a21 	.word	0x08002a21
 8002638:	08002a21 	.word	0x08002a21
 800263c:	08002661 	.word	0x08002661
 8002640:	08002a21 	.word	0x08002a21
 8002644:	08002a21 	.word	0x08002a21
 8002648:	08002a21 	.word	0x08002a21
 800264c:	08002851 	.word	0x08002851
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4bb9      	ldr	r3, [pc, #740]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x358>)
 8002652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002656:	e1e7      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4bb8      	ldr	r3, [pc, #736]	@ (800293c <HAL_RCC_GetSysClockFreq+0x35c>)
 800265a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800265e:	e1e3      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4bb4      	ldr	r3, [pc, #720]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266c:	4bb1      	ldr	r3, [pc, #708]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d071      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4bae      	ldr	r3, [pc, #696]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	2200      	movs	r2, #0
 8002680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002684:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800269a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0159      	lsls	r1, r3, #5
 80026ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b0:	0150      	lsls	r0, r2, #5
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4621      	mov	r1, r4
 80026b8:	1a51      	subs	r1, r2, r1
 80026ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80026bc:	4629      	mov	r1, r5
 80026be:	eb63 0301 	sbc.w	r3, r3, r1
 80026c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026d0:	4649      	mov	r1, r9
 80026d2:	018b      	lsls	r3, r1, #6
 80026d4:	4641      	mov	r1, r8
 80026d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026da:	4641      	mov	r1, r8
 80026dc:	018a      	lsls	r2, r1, #6
 80026de:	4641      	mov	r1, r8
 80026e0:	1a51      	subs	r1, r2, r1
 80026e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026e4:	4649      	mov	r1, r9
 80026e6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026f8:	4649      	mov	r1, r9
 80026fa:	00cb      	lsls	r3, r1, #3
 80026fc:	4641      	mov	r1, r8
 80026fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002702:	4641      	mov	r1, r8
 8002704:	00ca      	lsls	r2, r1, #3
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4603      	mov	r3, r0
 800270c:	4622      	mov	r2, r4
 800270e:	189b      	adds	r3, r3, r2
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
 8002712:	462b      	mov	r3, r5
 8002714:	460a      	mov	r2, r1
 8002716:	eb42 0303 	adc.w	r3, r2, r3
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002728:	4629      	mov	r1, r5
 800272a:	024b      	lsls	r3, r1, #9
 800272c:	4621      	mov	r1, r4
 800272e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002732:	4621      	mov	r1, r4
 8002734:	024a      	lsls	r2, r1, #9
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002744:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002748:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800274c:	f7fd fd5a 	bl	8000204 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800275a:	e067      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275c:	4b75      	ldr	r3, [pc, #468]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002768:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800276c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002776:	2300      	movs	r3, #0
 8002778:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800277a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027b0:	4649      	mov	r1, r9
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4641      	mov	r1, r8
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4641      	mov	r1, r8
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4641      	mov	r1, r8
 80027c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80027c4:	4649      	mov	r1, r9
 80027c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027de:	4692      	mov	sl, r2
 80027e0:	469b      	mov	fp, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	eb1a 0303 	adds.w	r3, sl, r3
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	462b      	mov	r3, r5
 80027ec:	eb4b 0303 	adc.w	r3, fp, r3
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002814:	2200      	movs	r2, #0
 8002816:	673b      	str	r3, [r7, #112]	@ 0x70
 8002818:	677a      	str	r2, [r7, #116]	@ 0x74
 800281a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800281e:	f7fd fcf1 	bl	8000204 <__aeabi_uldivmod>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4613      	mov	r3, r2
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800282c:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800283e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800284e:	e0eb      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002850:	4b38      	ldr	r3, [pc, #224]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285c:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d06b      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	2200      	movs	r2, #0
 8002870:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287a:	663b      	str	r3, [r7, #96]	@ 0x60
 800287c:	2300      	movs	r3, #0
 800287e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002880:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002884:	4622      	mov	r2, r4
 8002886:	462b      	mov	r3, r5
 8002888:	f04f 0000 	mov.w	r0, #0
 800288c:	f04f 0100 	mov.w	r1, #0
 8002890:	0159      	lsls	r1, r3, #5
 8002892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002896:	0150      	lsls	r0, r2, #5
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4621      	mov	r1, r4
 800289e:	1a51      	subs	r1, r2, r1
 80028a0:	61b9      	str	r1, [r7, #24]
 80028a2:	4629      	mov	r1, r5
 80028a4:	eb63 0301 	sbc.w	r3, r3, r1
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028b6:	4659      	mov	r1, fp
 80028b8:	018b      	lsls	r3, r1, #6
 80028ba:	4651      	mov	r1, sl
 80028bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c0:	4651      	mov	r1, sl
 80028c2:	018a      	lsls	r2, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ebb2 0801 	subs.w	r8, r2, r1
 80028ca:	4659      	mov	r1, fp
 80028cc:	eb63 0901 	sbc.w	r9, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028e4:	4690      	mov	r8, r2
 80028e6:	4699      	mov	r9, r3
 80028e8:	4623      	mov	r3, r4
 80028ea:	eb18 0303 	adds.w	r3, r8, r3
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	462b      	mov	r3, r5
 80028f2:	eb49 0303 	adc.w	r3, r9, r3
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002904:	4629      	mov	r1, r5
 8002906:	024b      	lsls	r3, r1, #9
 8002908:	4621      	mov	r1, r4
 800290a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800290e:	4621      	mov	r1, r4
 8002910:	024a      	lsls	r2, r1, #9
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800291a:	2200      	movs	r2, #0
 800291c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800291e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002920:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002924:	f7fd fc6e 	bl	8000204 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4613      	mov	r3, r2
 800292e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002932:	e065      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x420>
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	4b3d      	ldr	r3, [pc, #244]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x458>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	2200      	movs	r2, #0
 8002948:	4618      	mov	r0, r3
 800294a:	4611      	mov	r1, r2
 800294c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002950:	653b      	str	r3, [r7, #80]	@ 0x50
 8002952:	2300      	movs	r3, #0
 8002954:	657b      	str	r3, [r7, #84]	@ 0x54
 8002956:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800295a:	4642      	mov	r2, r8
 800295c:	464b      	mov	r3, r9
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	0159      	lsls	r1, r3, #5
 8002968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296c:	0150      	lsls	r0, r2, #5
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4641      	mov	r1, r8
 8002974:	1a51      	subs	r1, r2, r1
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	4649      	mov	r1, r9
 800297a:	eb63 0301 	sbc.w	r3, r3, r1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800298c:	4659      	mov	r1, fp
 800298e:	018b      	lsls	r3, r1, #6
 8002990:	4651      	mov	r1, sl
 8002992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002996:	4651      	mov	r1, sl
 8002998:	018a      	lsls	r2, r1, #6
 800299a:	4651      	mov	r1, sl
 800299c:	1a54      	subs	r4, r2, r1
 800299e:	4659      	mov	r1, fp
 80029a0:	eb63 0501 	sbc.w	r5, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	00eb      	lsls	r3, r5, #3
 80029ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b2:	00e2      	lsls	r2, r4, #3
 80029b4:	4614      	mov	r4, r2
 80029b6:	461d      	mov	r5, r3
 80029b8:	4643      	mov	r3, r8
 80029ba:	18e3      	adds	r3, r4, r3
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	464b      	mov	r3, r9
 80029c0:	eb45 0303 	adc.w	r3, r5, r3
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d2:	4629      	mov	r1, r5
 80029d4:	028b      	lsls	r3, r1, #10
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029dc:	4621      	mov	r1, r4
 80029de:	028a      	lsls	r2, r1, #10
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e8:	2200      	movs	r2, #0
 80029ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029f2:	f7fd fc07 	bl	8000204 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4613      	mov	r3, r2
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0f1b      	lsrs	r3, r3, #28
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a1e:	e003      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	37b8      	adds	r7, #184	@ 0xb8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	00f42400 	.word	0x00f42400

08002a40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e28d      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8083 	beq.w	8002b66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a60:	4b94      	ldr	r3, [pc, #592]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d019      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a6c:	4b91      	ldr	r3, [pc, #580]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a78:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a84:	d00c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b8b      	ldr	r3, [pc, #556]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d112      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b88      	ldr	r3, [pc, #544]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b84      	ldr	r3, [pc, #528]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x124>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d157      	bne.n	8002b64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e25a      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x90>
 8002ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xcc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xb4>
 8002ada:	4b76      	ldr	r3, [pc, #472]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a75      	ldr	r2, [pc, #468]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b73      	ldr	r3, [pc, #460]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a72      	ldr	r2, [pc, #456]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xcc>
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6b      	ldr	r2, [pc, #428]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fc86 	bl	8001424 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fc82 	bl	8001424 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e21f      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b61      	ldr	r3, [pc, #388]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xdc>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fc72 	bl	8001424 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe fc6e 	bl	8001424 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e20b      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b57      	ldr	r3, [pc, #348]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x104>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d06f      	beq.n	8002c52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b72:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d105      	bne.n	8002b96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	4b44      	ldr	r3, [pc, #272]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x186>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1d3      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4937      	ldr	r1, [pc, #220]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	e03a      	b.n	8002c52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x278>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fc1b 	bl	8001424 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fc17 	bl	8001424 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1b4      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b28      	ldr	r3, [pc, #160]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4925      	ldr	r1, [pc, #148]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b24      	ldr	r3, [pc, #144]	@ (8002cb8 <HAL_RCC_OscConfig+0x278>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fbfa 	bl	8001424 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c34:	f7fe fbf6 	bl	8001424 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e193      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <HAL_RCC_OscConfig+0x27c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fbda 	bl	8001424 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fe fbd6 	bl	8001424 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e173      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x234>
 8002c92:	e01b      	b.n	8002ccc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_RCC_OscConfig+0x27c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fbc3 	bl	8001424 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	e00e      	b.n	8002cc0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fbbf 	bl	8001424 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d907      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e15c      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	42470000 	.word	0x42470000
 8002cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ea      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8097 	beq.w	8002e08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b83      	ldr	r3, [pc, #524]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b79      	ldr	r3, [pc, #484]	@ (8002ef0 <HAL_RCC_OscConfig+0x4b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d118      	bne.n	8002d48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_OscConfig+0x4b0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	@ (8002ef0 <HAL_RCC_OscConfig+0x4b0>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fb7f 	bl	8001424 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe fb7b 	bl	8001424 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e118      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef0 <HAL_RCC_OscConfig+0x4b0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x31e>
 8002d50:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a65      	ldr	r2, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCC_OscConfig+0x358>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x340>
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6a:	4a60      	ldr	r2, [pc, #384]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d72:	4b5e      	ldr	r3, [pc, #376]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	4a5d      	ldr	r2, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0x358>
 8002d80:	4b5a      	ldr	r3, [pc, #360]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d84:	4a59      	ldr	r2, [pc, #356]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8c:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a56      	ldr	r2, [pc, #344]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe fb40 	bl	8001424 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fb3c 	bl	8001424 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0d7      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ee      	beq.n	8002da8 <HAL_RCC_OscConfig+0x368>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fb2a 	bl	8001424 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fb26 	bl	8001424 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0c1      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ee      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	4a3a      	ldr	r2, [pc, #232]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80ad 	beq.w	8002f6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e12:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d060      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d145      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b33      	ldr	r3, [pc, #204]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b4>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fafa 	bl	8001424 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe faf6 	bl	8001424 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e093      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	491b      	ldr	r1, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b4>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe facb 	bl	8001424 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fac7 	bl	8001424 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e064      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x452>
 8002eb0:	e05c      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fab4 	bl	8001424 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe fab0 	bl	8001424 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e04d      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x480>
 8002ede:	e045      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e040      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_RCC_OscConfig+0x538>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d030      	beq.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d129      	bne.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d122      	bne.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d119      	bne.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10f      	bne.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd ff74 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 fc8e 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d001      	beq.n	8003034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e046      	b.n	80030c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_TIM_Base_Start+0xb4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304e:	d01d      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <HAL_TIM_Base_Start+0xb8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1e      	ldr	r2, [pc, #120]	@ (80030d8 <HAL_TIM_Base_Start+0xbc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_TIM_Base_Start+0xc0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <HAL_TIM_Base_Start+0xc4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_TIM_Base_Start+0xc8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_TIM_Base_Start+0x70>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <HAL_TIM_Base_Start+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d010      	beq.n	80030c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e007      	b.n	80030c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40010400 	.word	0x40010400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40001800 	.word	0x40001800

080030ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e041      	b.n	8003182 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f839 	bl	800318a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 fbd6 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_TIM_OC_Start_IT+0x28>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e022      	b.n	800320e <HAL_TIM_OC_Start_IT+0x6e>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d109      	bne.n	80031e2 <HAL_TIM_OC_Start_IT+0x42>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e015      	b.n	800320e <HAL_TIM_OC_Start_IT+0x6e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_OC_Start_IT+0x5c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e008      	b.n	800320e <HAL_TIM_OC_Start_IT+0x6e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0c7      	b.n	80033a6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_TIM_OC_Start_IT+0x86>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003224:	e013      	b.n	800324e <HAL_TIM_OC_Start_IT+0xae>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d104      	bne.n	8003236 <HAL_TIM_OC_Start_IT+0x96>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003234:	e00b      	b.n	800324e <HAL_TIM_OC_Start_IT+0xae>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d104      	bne.n	8003246 <HAL_TIM_OC_Start_IT+0xa6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	e003      	b.n	800324e <HAL_TIM_OC_Start_IT+0xae>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d841      	bhi.n	80032d8 <HAL_TIM_OC_Start_IT+0x138>
 8003254:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <HAL_TIM_OC_Start_IT+0xbc>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003291 	.word	0x08003291
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032a3 	.word	0x080032a3
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032b5 	.word	0x080032b5
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032c7 	.word	0x080032c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0202 	orr.w	r2, r2, #2
 800329e:	60da      	str	r2, [r3, #12]
      break;
 80032a0:	e01d      	b.n	80032de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	60da      	str	r2, [r3, #12]
      break;
 80032b2:	e014      	b.n	80032de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	60da      	str	r2, [r3, #12]
      break;
 80032c4:	e00b      	b.n	80032de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0210 	orr.w	r2, r2, #16
 80032d4:	60da      	str	r2, [r3, #12]
      break;
 80032d6:	e002      	b.n	80032de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d15f      	bne.n	80033a4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fe7c 	bl	8003fea <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_TIM_OC_Start_IT+0x210>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_OC_Start_IT+0x166>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2c      	ldr	r2, [pc, #176]	@ (80033b4 <HAL_TIM_OC_Start_IT+0x214>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_TIM_OC_Start_IT+0x16a>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_TIM_OC_Start_IT+0x16c>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800331e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a22      	ldr	r2, [pc, #136]	@ (80033b0 <HAL_TIM_OC_Start_IT+0x210>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d01d      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1f      	ldr	r2, [pc, #124]	@ (80033b8 <HAL_TIM_OC_Start_IT+0x218>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1e      	ldr	r2, [pc, #120]	@ (80033bc <HAL_TIM_OC_Start_IT+0x21c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <HAL_TIM_OC_Start_IT+0x220>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <HAL_TIM_OC_Start_IT+0x214>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_TIM_OC_Start_IT+0x224>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_OC_Start_IT+0x1d0>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_TIM_OC_Start_IT+0x228>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d010      	beq.n	80033a4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	e007      	b.n	80033a4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40001800 	.word	0x40001800

080033cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0202 	mvn.w	r2, #2
 8003400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa41 	bl	800389e <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa33 	bl	800388a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa44 	bl	80038b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0204 	mvn.w	r2, #4
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa1b 	bl	800389e <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa0d 	bl	800388a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa1e 	bl	80038b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9f5 	bl	800389e <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9e7 	bl	800388a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9f8 	bl	80038b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d020      	beq.n	8003514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0210 	mvn.w	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2208      	movs	r2, #8
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9cf 	bl	800389e <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9c1 	bl	800388a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f9d2 	bl	80038b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0201 	mvn.w	r2, #1
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f99f 	bl	8003876 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fe44 	bl	80041e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9a3 	bl	80038c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0220 	mvn.w	r2, #32
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fe16 	bl	80041d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e048      	b.n	800365c <HAL_TIM_OC_ConfigChannel+0xb0>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d839      	bhi.n	800364c <HAL_TIM_OC_ConfigChannel+0xa0>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800364d 	.word	0x0800364d
 80035e8:	0800364d 	.word	0x0800364d
 80035ec:	0800364d 	.word	0x0800364d
 80035f0:	08003623 	.word	0x08003623
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	08003631 	.word	0x08003631
 8003604:	0800364d 	.word	0x0800364d
 8003608:	0800364d 	.word	0x0800364d
 800360c:	0800364d 	.word	0x0800364d
 8003610:	0800363f 	.word	0x0800363f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa0a 	bl	8003a34 <TIM_OC1_SetConfig>
      break;
 8003620:	e017      	b.n	8003652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fa73 	bl	8003b14 <TIM_OC2_SetConfig>
      break;
 800362e:	e010      	b.n	8003652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fae2 	bl	8003c00 <TIM_OC3_SetConfig>
      break;
 800363c:	e009      	b.n	8003652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fb4f 	bl	8003ce8 <TIM_OC4_SetConfig>
      break;
 800364a:	e002      	b.n	8003652 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIM_ConfigClockSource+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e0b4      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x186>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b8:	d03e      	beq.n	8003738 <HAL_TIM_ConfigClockSource+0xd4>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036be:	f200 8087 	bhi.w	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c6:	f000 8086 	beq.w	80037d6 <HAL_TIM_ConfigClockSource+0x172>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ce:	d87f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b70      	cmp	r3, #112	@ 0x70
 80036d2:	d01a      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xa6>
 80036d4:	2b70      	cmp	r3, #112	@ 0x70
 80036d6:	d87b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b60      	cmp	r3, #96	@ 0x60
 80036da:	d050      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x11a>
 80036dc:	2b60      	cmp	r3, #96	@ 0x60
 80036de:	d877      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b50      	cmp	r3, #80	@ 0x50
 80036e2:	d03c      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xfa>
 80036e4:	2b50      	cmp	r3, #80	@ 0x50
 80036e6:	d873      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d058      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x13a>
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d86f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b30      	cmp	r3, #48	@ 0x30
 80036f2:	d064      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036f4:	2b30      	cmp	r3, #48	@ 0x30
 80036f6:	d86b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d060      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d867      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d05c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d05a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	e062      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	f000 fc46 	bl	8003faa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800372c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
      break;
 8003736:	e04f      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	f000 fc2f 	bl	8003faa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800375a:	609a      	str	r2, [r3, #8]
      break;
 800375c:	e03c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376a:	461a      	mov	r2, r3
 800376c:	f000 fba3 	bl	8003eb6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2150      	movs	r1, #80	@ 0x50
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fbfc 	bl	8003f74 <TIM_ITRx_SetConfig>
      break;
 800377c:	e02c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800378a:	461a      	mov	r2, r3
 800378c:	f000 fbc2 	bl	8003f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2160      	movs	r1, #96	@ 0x60
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fbec 	bl	8003f74 <TIM_ITRx_SetConfig>
      break;
 800379c:	e01c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 fb83 	bl	8003eb6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2140      	movs	r1, #64	@ 0x40
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fbdc 	bl	8003f74 <TIM_ITRx_SetConfig>
      break;
 80037bc:	e00c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 fbd3 	bl	8003f74 <TIM_ITRx_SetConfig>
      break;
 80037ce:	e003      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003806:	2302      	movs	r3, #2
 8003808:	e031      	b.n	800386e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fab9 	bl	8003d94 <TIM_SlaveTimer_SetConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e018      	b.n	800386e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800385a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a46      	ldr	r2, [pc, #280]	@ (8003a08 <TIM_Base_SetConfig+0x12c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a43      	ldr	r2, [pc, #268]	@ (8003a0c <TIM_Base_SetConfig+0x130>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a42      	ldr	r2, [pc, #264]	@ (8003a10 <TIM_Base_SetConfig+0x134>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a41      	ldr	r2, [pc, #260]	@ (8003a14 <TIM_Base_SetConfig+0x138>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a40      	ldr	r2, [pc, #256]	@ (8003a18 <TIM_Base_SetConfig+0x13c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a35      	ldr	r2, [pc, #212]	@ (8003a08 <TIM_Base_SetConfig+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d027      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a32      	ldr	r2, [pc, #200]	@ (8003a0c <TIM_Base_SetConfig+0x130>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d023      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <TIM_Base_SetConfig+0x134>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a30      	ldr	r2, [pc, #192]	@ (8003a14 <TIM_Base_SetConfig+0x138>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2f      	ldr	r2, [pc, #188]	@ (8003a18 <TIM_Base_SetConfig+0x13c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2e      	ldr	r2, [pc, #184]	@ (8003a1c <TIM_Base_SetConfig+0x140>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2d      	ldr	r2, [pc, #180]	@ (8003a20 <TIM_Base_SetConfig+0x144>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2c      	ldr	r2, [pc, #176]	@ (8003a24 <TIM_Base_SetConfig+0x148>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2b      	ldr	r2, [pc, #172]	@ (8003a28 <TIM_Base_SetConfig+0x14c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2a      	ldr	r2, [pc, #168]	@ (8003a2c <TIM_Base_SetConfig+0x150>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a29      	ldr	r2, [pc, #164]	@ (8003a30 <TIM_Base_SetConfig+0x154>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <TIM_Base_SetConfig+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <TIM_Base_SetConfig+0x13c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f023 0201 	bic.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]
  }
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40010400 	.word	0x40010400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800
 8003a28:	40001800 	.word	0x40001800
 8003a2c:	40001c00 	.word	0x40001c00
 8003a30:	40002000 	.word	0x40002000

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 0201 	bic.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0302 	bic.w	r3, r3, #2
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a20      	ldr	r2, [pc, #128]	@ (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC1_SetConfig+0x64>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10c      	bne.n	8003ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0308 	bic.w	r3, r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x8e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 0210 	bic.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a22      	ldr	r2, [pc, #136]	@ (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC2_SetConfig+0x68>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a21      	ldr	r2, [pc, #132]	@ (8003bfc <TIM_OC2_SetConfig+0xe8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10d      	bne.n	8003b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC2_SetConfig+0x94>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <TIM_OC2_SetConfig+0xe8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d113      	bne.n	8003bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40010400 	.word	0x40010400

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <TIM_OC3_SetConfig+0xe0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_OC3_SetConfig+0x66>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	@ (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10d      	bne.n	8003c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <TIM_OC3_SetConfig+0xe0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_OC3_SetConfig+0x92>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d113      	bne.n	8003cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	@ (8003d8c <TIM_OC4_SetConfig+0xa4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC4_SetConfig+0x68>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <TIM_OC4_SetConfig+0xa8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010400 	.word	0x40010400

08003d94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 0307 	bic.w	r3, r3, #7
 8003dc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b70      	cmp	r3, #112	@ 0x70
 8003ddc:	d01a      	beq.n	8003e14 <TIM_SlaveTimer_SetConfig+0x80>
 8003dde:	2b70      	cmp	r3, #112	@ 0x70
 8003de0:	d860      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003de2:	2b60      	cmp	r3, #96	@ 0x60
 8003de4:	d054      	beq.n	8003e90 <TIM_SlaveTimer_SetConfig+0xfc>
 8003de6:	2b60      	cmp	r3, #96	@ 0x60
 8003de8:	d85c      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003dea:	2b50      	cmp	r3, #80	@ 0x50
 8003dec:	d046      	beq.n	8003e7c <TIM_SlaveTimer_SetConfig+0xe8>
 8003dee:	2b50      	cmp	r3, #80	@ 0x50
 8003df0:	d858      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003df2:	2b40      	cmp	r3, #64	@ 0x40
 8003df4:	d019      	beq.n	8003e2a <TIM_SlaveTimer_SetConfig+0x96>
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	d854      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003dfa:	2b30      	cmp	r3, #48	@ 0x30
 8003dfc:	d055      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x116>
 8003dfe:	2b30      	cmp	r3, #48	@ 0x30
 8003e00:	d850      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d051      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x116>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d84c      	bhi.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04d      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x116>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d04b      	beq.n	8003eaa <TIM_SlaveTimer_SetConfig+0x116>
 8003e12:	e047      	b.n	8003ea4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	f000 f8c1 	bl	8003faa <TIM_ETR_SetConfig>
      break;
 8003e28:	e040      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d101      	bne.n	8003e36 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03b      	b.n	8003eae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
      break;
 8003e7a:	e017      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f000 f814 	bl	8003eb6 <TIM_TI1_ConfigInputStage>
      break;
 8003e8e:	e00d      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f000 f839 	bl	8003f14 <TIM_TI2_ConfigInputStage>
      break;
 8003ea2:	e003      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea8:	e000      	b.n	8003eac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003eaa:	bf00      	nop
  }

  return status;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b087      	sub	sp, #28
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 0201 	bic.w	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 030a 	bic.w	r3, r3, #10
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0210 	bic.w	r2, r3, #16
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	031b      	lsls	r3, r3, #12
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f043 0307 	orr.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b087      	sub	sp, #28
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	43db      	mvns	r3, r3
 800400c:	401a      	ands	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e05a      	b.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a21      	ldr	r2, [pc, #132]	@ (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d01d      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10c      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40001800 	.word	0x40001800

0800412c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004144:	2302      	movs	r3, #2
 8004146:	e03d      	b.n	80041c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e042      	b.n	8004290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc feaa 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	@ 0x24
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800423a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f973 	bl	8004528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	@ 0x28
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d175      	bne.n	80043a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_UART_Transmit+0x2c>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e06e      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2221      	movs	r2, #33	@ 0x21
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042d6:	f7fd f8a5 	bl	8001424 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f0:	d108      	bne.n	8004304 <HAL_UART_Transmit+0x6c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e003      	b.n	800430c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800430c:	e02e      	b.n	800436c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	@ 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f848 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e03a      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e007      	b.n	800435e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1cb      	bne.n	800430e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2140      	movs	r1, #64	@ 0x40
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f814 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	e03b      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d037      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fd f82c 	bl	8001424 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	6a3a      	ldr	r2, [r7, #32]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <UART_WaitOnFlagUntilTimeout+0x30>
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e03a      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	d020      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d01d      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b08      	cmp	r3, #8
 8004408:	d116      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f81d 	bl	8004460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2208      	movs	r2, #8
 800442a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e00f      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	429a      	cmp	r2, r3
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	429a      	cmp	r2, r3
 8004454:	d0b4      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b095      	sub	sp, #84	@ 0x54
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004488:	643a      	str	r2, [r7, #64]	@ 0x40
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e5      	bne.n	8004468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d119      	bne.n	800450c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f8:	61ba      	str	r2, [r7, #24]
 80044fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	613b      	str	r3, [r7, #16]
   return(result);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800451a:	bf00      	nop
 800451c:	3754      	adds	r7, #84	@ 0x54
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800452c:	b0c0      	sub	sp, #256	@ 0x100
 800452e:	af00      	add	r7, sp, #0
 8004530:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	68d9      	ldr	r1, [r3, #12]
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	ea40 0301 	orr.w	r3, r0, r1
 8004550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	431a      	orrs	r2, r3
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004580:	f021 010c 	bic.w	r1, r1, #12
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800458e:	430b      	orrs	r3, r1
 8004590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	6999      	ldr	r1, [r3, #24]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	ea40 0301 	orr.w	r3, r0, r1
 80045ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b8f      	ldr	r3, [pc, #572]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d005      	beq.n	80045c8 <UART_SetConfig+0xa0>
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b8d      	ldr	r3, [pc, #564]	@ (80047f8 <UART_SetConfig+0x2d0>)
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d104      	bne.n	80045d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fd fff6 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 80045cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045d0:	e003      	b.n	80045da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d2:	f7fd ffdd 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 80045d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e4:	f040 810c 	bne.w	8004800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045fa:	4622      	mov	r2, r4
 80045fc:	462b      	mov	r3, r5
 80045fe:	1891      	adds	r1, r2, r2
 8004600:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004602:	415b      	adcs	r3, r3
 8004604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800460a:	4621      	mov	r1, r4
 800460c:	eb12 0801 	adds.w	r8, r2, r1
 8004610:	4629      	mov	r1, r5
 8004612:	eb43 0901 	adc.w	r9, r3, r1
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462a:	4690      	mov	r8, r2
 800462c:	4699      	mov	r9, r3
 800462e:	4623      	mov	r3, r4
 8004630:	eb18 0303 	adds.w	r3, r8, r3
 8004634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004638:	462b      	mov	r3, r5
 800463a:	eb49 0303 	adc.w	r3, r9, r3
 800463e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800464e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004656:	460b      	mov	r3, r1
 8004658:	18db      	adds	r3, r3, r3
 800465a:	653b      	str	r3, [r7, #80]	@ 0x50
 800465c:	4613      	mov	r3, r2
 800465e:	eb42 0303 	adc.w	r3, r2, r3
 8004662:	657b      	str	r3, [r7, #84]	@ 0x54
 8004664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800466c:	f7fb fdca 	bl	8000204 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4b61      	ldr	r3, [pc, #388]	@ (80047fc <UART_SetConfig+0x2d4>)
 8004676:	fba3 2302 	umull	r2, r3, r3, r2
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	011c      	lsls	r4, r3, #4
 800467e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004682:	2200      	movs	r2, #0
 8004684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004688:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800468c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	1891      	adds	r1, r2, r2
 8004696:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004698:	415b      	adcs	r3, r3
 800469a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800469c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a0:	4641      	mov	r1, r8
 80046a2:	eb12 0a01 	adds.w	sl, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb43 0b01 	adc.w	fp, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c0:	4692      	mov	sl, r2
 80046c2:	469b      	mov	fp, r3
 80046c4:	4643      	mov	r3, r8
 80046c6:	eb1a 0303 	adds.w	r3, sl, r3
 80046ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ce:	464b      	mov	r3, r9
 80046d0:	eb4b 0303 	adc.w	r3, fp, r3
 80046d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046ec:	460b      	mov	r3, r1
 80046ee:	18db      	adds	r3, r3, r3
 80046f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f2:	4613      	mov	r3, r2
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004702:	f7fb fd7f 	bl	8000204 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4611      	mov	r1, r2
 800470c:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <UART_SetConfig+0x2d4>)
 800470e:	fba3 2301 	umull	r2, r3, r3, r1
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2264      	movs	r2, #100	@ 0x64
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	1acb      	subs	r3, r1, r3
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004722:	4b36      	ldr	r3, [pc, #216]	@ (80047fc <UART_SetConfig+0x2d4>)
 8004724:	fba3 2302 	umull	r2, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004730:	441c      	add	r4, r3
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800473c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	1891      	adds	r1, r2, r2
 800474a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800474c:	415b      	adcs	r3, r3
 800474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004754:	4641      	mov	r1, r8
 8004756:	1851      	adds	r1, r2, r1
 8004758:	6339      	str	r1, [r7, #48]	@ 0x30
 800475a:	4649      	mov	r1, r9
 800475c:	414b      	adcs	r3, r1
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800476c:	4659      	mov	r1, fp
 800476e:	00cb      	lsls	r3, r1, #3
 8004770:	4651      	mov	r1, sl
 8004772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004776:	4651      	mov	r1, sl
 8004778:	00ca      	lsls	r2, r1, #3
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	4603      	mov	r3, r0
 8004780:	4642      	mov	r2, r8
 8004782:	189b      	adds	r3, r3, r2
 8004784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004788:	464b      	mov	r3, r9
 800478a:	460a      	mov	r2, r1
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047a8:	460b      	mov	r3, r1
 80047aa:	18db      	adds	r3, r3, r3
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ae:	4613      	mov	r3, r2
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047be:	f7fb fd21 	bl	8000204 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <UART_SetConfig+0x2d4>)
 80047c8:	fba3 1302 	umull	r1, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	2164      	movs	r1, #100	@ 0x64
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	3332      	adds	r3, #50	@ 0x32
 80047da:	4a08      	ldr	r2, [pc, #32]	@ (80047fc <UART_SetConfig+0x2d4>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f003 0207 	and.w	r2, r3, #7
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4422      	add	r2, r4
 80047ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f0:	e106      	b.n	8004a00 <UART_SetConfig+0x4d8>
 80047f2:	bf00      	nop
 80047f4:	40011000 	.word	0x40011000
 80047f8:	40011400 	.word	0x40011400
 80047fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004804:	2200      	movs	r2, #0
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800480a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800480e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004812:	4642      	mov	r2, r8
 8004814:	464b      	mov	r3, r9
 8004816:	1891      	adds	r1, r2, r2
 8004818:	6239      	str	r1, [r7, #32]
 800481a:	415b      	adcs	r3, r3
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
 800481e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004822:	4641      	mov	r1, r8
 8004824:	1854      	adds	r4, r2, r1
 8004826:	4649      	mov	r1, r9
 8004828:	eb43 0501 	adc.w	r5, r3, r1
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	00eb      	lsls	r3, r5, #3
 8004836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483a:	00e2      	lsls	r2, r4, #3
 800483c:	4614      	mov	r4, r2
 800483e:	461d      	mov	r5, r3
 8004840:	4643      	mov	r3, r8
 8004842:	18e3      	adds	r3, r4, r3
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004848:	464b      	mov	r3, r9
 800484a:	eb45 0303 	adc.w	r3, r5, r3
 800484e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800485e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800486e:	4629      	mov	r1, r5
 8004870:	008b      	lsls	r3, r1, #2
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004878:	4621      	mov	r1, r4
 800487a:	008a      	lsls	r2, r1, #2
 800487c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004880:	f7fb fcc0 	bl	8000204 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4b60      	ldr	r3, [pc, #384]	@ (8004a0c <UART_SetConfig+0x4e4>)
 800488a:	fba3 2302 	umull	r2, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	011c      	lsls	r4, r3, #4
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800489c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	61b9      	str	r1, [r7, #24]
 80048ac:	415b      	adcs	r3, r3
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	4641      	mov	r1, r8
 80048b6:	1851      	adds	r1, r2, r1
 80048b8:	6139      	str	r1, [r7, #16]
 80048ba:	4649      	mov	r1, r9
 80048bc:	414b      	adcs	r3, r1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048cc:	4659      	mov	r1, fp
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4651      	mov	r1, sl
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4642      	mov	r2, r8
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048e8:	464b      	mov	r3, r9
 80048ea:	460a      	mov	r2, r1
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800490c:	4649      	mov	r1, r9
 800490e:	008b      	lsls	r3, r1, #2
 8004910:	4641      	mov	r1, r8
 8004912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004916:	4641      	mov	r1, r8
 8004918:	008a      	lsls	r2, r1, #2
 800491a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800491e:	f7fb fc71 	bl	8000204 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4611      	mov	r1, r2
 8004928:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <UART_SetConfig+0x4e4>)
 800492a:	fba3 2301 	umull	r2, r3, r3, r1
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2264      	movs	r2, #100	@ 0x64
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	@ 0x32
 800493c:	4a33      	ldr	r2, [pc, #204]	@ (8004a0c <UART_SetConfig+0x4e4>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004948:	441c      	add	r4, r3
 800494a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494e:	2200      	movs	r2, #0
 8004950:	673b      	str	r3, [r7, #112]	@ 0x70
 8004952:	677a      	str	r2, [r7, #116]	@ 0x74
 8004954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	1891      	adds	r1, r2, r2
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	415b      	adcs	r3, r3
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004968:	4641      	mov	r1, r8
 800496a:	1851      	adds	r1, r2, r1
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	4649      	mov	r1, r9
 8004970:	414b      	adcs	r3, r1
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004980:	4659      	mov	r1, fp
 8004982:	00cb      	lsls	r3, r1, #3
 8004984:	4651      	mov	r1, sl
 8004986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498a:	4651      	mov	r1, sl
 800498c:	00ca      	lsls	r2, r1, #3
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	4603      	mov	r3, r0
 8004994:	4642      	mov	r2, r8
 8004996:	189b      	adds	r3, r3, r2
 8004998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800499a:	464b      	mov	r3, r9
 800499c:	460a      	mov	r2, r1
 800499e:	eb42 0303 	adc.w	r3, r2, r3
 80049a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049bc:	4649      	mov	r1, r9
 80049be:	008b      	lsls	r3, r1, #2
 80049c0:	4641      	mov	r1, r8
 80049c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c6:	4641      	mov	r1, r8
 80049c8:	008a      	lsls	r2, r1, #2
 80049ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ce:	f7fb fc19 	bl	8000204 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <UART_SetConfig+0x4e4>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	@ 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	@ 0x32
 80049ea:	4a08      	ldr	r2, [pc, #32]	@ (8004a0c <UART_SetConfig+0x4e4>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4422      	add	r2, r4
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a06:	46bd      	mov	sp, r7
 8004a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0c:	51eb851f 	.word	0x51eb851f

08004a10 <memset>:
 8004a10:	4402      	add	r2, r0
 8004a12:	4603      	mov	r3, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4d0d      	ldr	r5, [pc, #52]	@ (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	@ (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1b64      	subs	r4, r4, r5
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4d0b      	ldr	r5, [pc, #44]	@ (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	@ (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 f826 	bl	8004a84 <_init>
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2600      	movs	r6, #0
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	08004ad8 	.word	0x08004ad8
 8004a5c:	08004ad8 	.word	0x08004ad8
 8004a60:	08004ad8 	.word	0x08004ad8
 8004a64:	08004adc 	.word	0x08004adc

08004a68 <memcpy>:
 8004a68:	440a      	add	r2, r1
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xc>
 8004a72:	4770      	bx	lr
 8004a74:	b510      	push	{r4, lr}
 8004a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	d1f9      	bne.n	8004a76 <memcpy+0xe>
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <_init>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr

08004a90 <_fini>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr
