
Frequency-meter-based-on-STM32-Method2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080053ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000006c  08005458  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005458  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110ae  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002442  00000000  00000000  0001814a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf5  00000000  00000000  0001b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022717  00000000  00000000  0001c2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014988  00000000  00000000  0003ea04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3559  00000000  00000000  0005338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001268e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab4  00000000  00000000  00126928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0012b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005344 	.word	0x08005344

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005344 	.word	0x08005344

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005aa:	4a38      	ldr	r2, [pc, #224]	@ (800068c <HD44780_Init+0xec>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005b0:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <HD44780_Init+0xf0>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005b6:	4b37      	ldr	r3, [pc, #220]	@ (8000694 <HD44780_Init+0xf4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005bc:	4b33      	ldr	r3, [pc, #204]	@ (800068c <HD44780_Init+0xec>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d907      	bls.n	80005d4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <HD44780_Init+0xf4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <HD44780_Init+0xf4>)
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e006      	b.n	80005e2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <HD44780_Init+0xf4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <HD44780_Init+0xf4>)
 80005e0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005e2:	f000 f993 	bl	800090c <DelayInit>
  HAL_Delay(50);
 80005e6:	2032      	movs	r0, #50	@ 0x32
 80005e8:	f000 ff22 	bl	8001430 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <HD44780_Init+0xf0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f951 	bl	8000898 <ExpanderWrite>
  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f000 ff19 	bl	8001430 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005fe:	2030      	movs	r0, #48	@ 0x30
 8000600:	f000 f938 	bl	8000874 <Write4Bits>
  DelayUS(4500);
 8000604:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000608:	f000 f9aa 	bl	8000960 <DelayUS>

  Write4Bits(0x03 << 4);
 800060c:	2030      	movs	r0, #48	@ 0x30
 800060e:	f000 f931 	bl	8000874 <Write4Bits>
  DelayUS(4500);
 8000612:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000616:	f000 f9a3 	bl	8000960 <DelayUS>

  Write4Bits(0x03 << 4);
 800061a:	2030      	movs	r0, #48	@ 0x30
 800061c:	f000 f92a 	bl	8000874 <Write4Bits>
  DelayUS(4500);
 8000620:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000624:	f000 f99c 	bl	8000960 <DelayUS>

  Write4Bits(0x02 << 4);
 8000628:	2020      	movs	r0, #32
 800062a:	f000 f923 	bl	8000874 <Write4Bits>
  DelayUS(100);
 800062e:	2064      	movs	r0, #100	@ 0x64
 8000630:	f000 f996 	bl	8000960 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <HD44780_Init+0xf4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8db 	bl	80007fa <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <HD44780_Init+0xf8>)
 8000646:	2204      	movs	r2, #4
 8000648:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800064a:	f000 f875 	bl	8000738 <HD44780_Display>
  HD44780_Clear();
 800064e:	f000 f82b 	bl	80006a8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HD44780_Init+0xfc>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <HD44780_Init+0xfc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f8c9 	bl	80007fa <SendCommand>
  DelayUS(4500);
 8000668:	f241 1094 	movw	r0, #4500	@ 0x1194
 800066c:	f000 f978 	bl	8000960 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000670:	490b      	ldr	r1, [pc, #44]	@ (80006a0 <HD44780_Init+0x100>)
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f876 	bl	8000764 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000678:	490a      	ldr	r1, [pc, #40]	@ (80006a4 <HD44780_Init+0x104>)
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f872 	bl	8000764 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000680:	f000 f81d 	bl	80006be <HD44780_Home>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008b 	.word	0x2000008b
 8000690:	2000008c 	.word	0x2000008c
 8000694:	20000088 	.word	0x20000088
 8000698:	20000089 	.word	0x20000089
 800069c:	2000008a 	.word	0x2000008a
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008

080006a8 <HD44780_Clear>:

void HD44780_Clear()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f8a4 	bl	80007fa <SendCommand>
  DelayUS(2000);
 80006b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b6:	f000 f953 	bl	8000960 <DelayUS>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <HD44780_Home>:

void HD44780_Home()
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f899 	bl	80007fa <SendCommand>
  DelayUS(2000);
 80006c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006cc:	f000 f948 	bl	8000960 <DelayUS>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HD44780_SetCursor+0x5c>)
 80006e6:	f107 0408 	add.w	r4, r7, #8
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <HD44780_SetCursor+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d303      	bcc.n	8000702 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HD44780_SetCursor+0x60>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	3318      	adds	r3, #24
 8000708:	443b      	add	r3, r7
 800070a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4413      	add	r3, r2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071c:	b25b      	sxtb	r3, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f86a 	bl	80007fa <SendCommand>
}
 8000726:	bf00      	nop
 8000728:	371c      	adds	r7, #28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	bf00      	nop
 8000730:	0800535c 	.word	0x0800535c
 8000734:	2000008b 	.word	0x2000008b

08000738 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HD44780_Display+0x28>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HD44780_Display+0x28>)
 8000748:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HD44780_Display+0x28>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f850 	bl	80007fa <SendCommand>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000089 	.word	0x20000089

08000764 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000782:	b25b      	sxtb	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f837 	bl	80007fa <SendCommand>
  for (int i=0; i<8; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e009      	b.n	80007a6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f83b 	bl	8000816 <SendChar>
  for (int i=0; i<8; i++)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	ddf2      	ble.n	8000792 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f827 	bl	8000816 <SendChar>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007d8:	e006      	b.n	80007e8 <HD44780_PrintStr+0x18>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f817 	bl	8000816 <SendChar>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f4      	bne.n	80007da <HD44780_PrintStr+0xa>
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f812 	bl	8000832 <Send>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f804 	bl	8000832 <Send>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	460a      	mov	r2, r1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	4613      	mov	r3, r2
 8000840:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 030f 	bic.w	r3, r3, #15
 8000848:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	4313      	orrs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f80b 	bl	8000874 <Write4Bits>
  Write4Bits((lownib)|mode);
 800085e:	7bba      	ldrb	r2, [r7, #14]
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	4313      	orrs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f804 	bl	8000874 <Write4Bits>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f809 	bl	8000898 <ExpanderWrite>
  PulseEnable(value);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f821 	bl	80008d0 <PulseEnable>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <ExpanderWrite+0x30>)
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80008ae:	f107 020f 	add.w	r2, r7, #15
 80008b2:	230a      	movs	r3, #10
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	214e      	movs	r1, #78	@ 0x4e
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <ExpanderWrite+0x34>)
 80008bc:	f001 f9c6 	bl	8001c4c <HAL_I2C_Master_Transmit>
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	20000090 	.word	0x20000090

080008d0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd8 	bl	8000898 <ExpanderWrite>
  DelayUS(20);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f000 f839 	bl	8000960 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f023 0304 	bic.w	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffce 	bl	8000898 <ExpanderWrite>
  DelayUS(20);
 80008fc:	2014      	movs	r0, #20
 80008fe:	f000 f82f 	bl	8000960 <DelayUS>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <DelayInit>:

static void DelayInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <DelayInit+0x4c>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <DelayInit+0x4c>)
 8000916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800091a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <DelayInit+0x4c>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <DelayInit+0x4c>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000926:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <DelayInit+0x50>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <DelayInit+0x50>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <DelayInit+0x50>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	@ (800095c <DelayInit+0x50>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <DelayInit+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000946:	bf00      	nop
  __ASM volatile ("NOP");
 8000948:	bf00      	nop
  __ASM volatile ("NOP");
 800094a:	bf00      	nop
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000edf0 	.word	0xe000edf0
 800095c:	e0001000 	.word	0xe0001000

08000960 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <DelayUS+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <DelayUS+0x48>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	0c9a      	lsrs	r2, r3, #18
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <DelayUS+0x4c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <DelayUS+0x4c>)
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f6      	bhi.n	8000982 <DelayUS+0x22>
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	371c      	adds	r7, #28
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000010 	.word	0x20000010
 80009a8:	431bde83 	.word	0x431bde83
 80009ac:	e0001000 	.word	0xe0001000

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fcca 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f81c 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 f9ee 	bl	8000d9c <MX_GPIO_Init>
  MX_TIM1_Init();
 80009c0:	f000 f8b8 	bl	8000b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c4:	f000 f956 	bl	8000c74 <MX_TIM2_Init>
  MX_I2C1_Init();
 80009c8:	f000 f886 	bl	8000ad8 <MX_I2C1_Init>
  MX_UART4_Init();
 80009cc:	f000 f9bc 	bl	8000d48 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fde5 	bl	80005a0 <HD44780_Init>
  HD44780_Clear();
 80009d6:	f7ff fe67 	bl	80006a8 <HD44780_Clear>
  HAL_TIM_Base_Start(&htim2);
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <main+0x3c>)
 80009dc:	f002 fb18 	bl	8003010 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <main+0x40>)
 80009e4:	f002 fbd6 	bl	8003194 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <main+0x38>
 80009ec:	2000012c 	.word	0x2000012c
 80009f0:	200000e4 	.word	0x200000e4

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f81e 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <SystemClock_Config+0xdc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <SystemClock_Config+0xe0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a68:	23b4      	movs	r3, #180	@ 0xb4
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 ffd9 	bl	8002a34 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a88:	f000 f9e2 	bl	8000e50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a8c:	f001 fc38 	bl	8002300 <HAL_PWREx_EnableOverDrive>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f9db 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fc71 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ac4:	f000 f9c4 	bl	8000e50 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3750      	adds	r7, #80	@ 0x50
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	@ (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f000 ff55 	bl	80019c4 <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f996 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b096      	sub	sp, #88	@ 0x58
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 ff69 	bl	8004a44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b72:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b74:	4a3e      	ldr	r2, [pc, #248]	@ (8000c70 <MX_TIM1_Init+0x13c>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000-1;
 8000b78:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b7a:	f244 624f 	movw	r2, #17999	@ 0x464f
 8000b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000b86:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b94:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba0:	4832      	ldr	r0, [pc, #200]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000ba2:	f002 f9e5 	bl	8002f70 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 f950 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bba:	4619      	mov	r1, r3
 8000bbc:	482b      	ldr	r0, [pc, #172]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000bbe:	f002 fd4b 	bl	8003658 <HAL_TIM_ConfigClockSource>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bc8:	f000 f942 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bcc:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000bce:	f002 fa87 	bl	80030e0 <HAL_TIM_OC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bd8:	f000 f93a 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000be8:	4619      	mov	r1, r3
 8000bea:	4820      	ldr	r0, [pc, #128]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000bec:	f003 fa1c 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bf6:	f000 f92b 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10000-3;
 8000bfe:	f242 730d 	movw	r3, #9997	@ 0x270d
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000c22:	f002 fcbd 	bl	80035a0 <HAL_TIM_OC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c2c:	f000 f910 	bl	8000e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_TIM1_Init+0x138>)
 8000c54:	f003 fa64 	bl	8004120 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000c5e:	f000 f8f7 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3758      	adds	r7, #88	@ 0x58
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000e4 	.word	0x200000e4
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc8:	481e      	ldr	r0, [pc, #120]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cca:	f002 f951 	bl	8002f70 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000cd4:	f000 f8bc 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cdc:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000cf2:	f002 fcb1 	bl	8003658 <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f8a8 	bl	8000e50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d00:	2304      	movs	r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000d10:	f002 fd69 	bl	80037e6 <HAL_TIM_SlaveConfigSynchro>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000d1a:	f000 f899 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM2_Init+0xd0>)
 8000d2c:	f003 f97c 	bl	8004028 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000d36:	f000 f88b 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	@ 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000012c 	.word	0x2000012c

08000d48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <MX_UART4_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_UART4_Init+0x4c>)
 8000d80:	f003 fa34 	bl	80041ec <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f000 f861 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000174 	.word	0x20000174
 8000d98:	40004c00 	.word	0x40004c00

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_GPIO_Init+0xac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_GPIO_Init+0xb0>)
 8000e3a:	f000 fc2f 	bl	800169c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Error_Handler+0x8>

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e9a:	2007      	movs	r0, #7
 8000e9c:	f000 fbbc 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <HAL_I2C_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12c      	bne.n	8000f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efc:	2304      	movs	r3, #4
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <HAL_I2C_MspInit+0x8c>)
 8000f08:	f000 fbc8 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000f16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_I2C_MspInit+0x88>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40005400 	.word	0x40005400
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020400 	.word	0x40020400

08000f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2f      	ldr	r2, [pc, #188]	@ (8001018 <HAL_TIM_Base_MspInit+0xdc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11e      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a2d      	ldr	r2, [pc, #180]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2019      	movs	r0, #25
 8000f80:	f000 fb55 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 fb6e 	bl	8001666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201b      	movs	r0, #27
 8000f90:	f000 fb4d 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f94:	201b      	movs	r0, #27
 8000f96:	f000 fb66 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f9a:	e038      	b.n	800100e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa4:	d133      	bne.n	800100e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_TIM_Base_MspInit+0xe0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <HAL_TIM_Base_MspInit+0xe4>)
 8000ffa:	f000 fb4f 	bl	800169c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f000 fb13 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001008:	201c      	movs	r0, #28
 800100a:	f000 fb2c 	bl	8001666 <HAL_NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010000 	.word	0x40010000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_UART_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_UART_MspInit+0x88>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_UART_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800107e:	2303      	movs	r3, #3
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800108e:	2308      	movs	r3, #8
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_UART_MspInit+0x8c>)
 800109a:	f000 faff 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004c00 	.word	0x40004c00
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <SendDataLCDUSB>:

#define ERR_MESSAGE_LENGTH   9
#define RAW_LENGTH           16

extern UART_HandleTypeDef huart4;
void SendDataLCDUSB(uint32_t frequency){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	  uint32_t temp = frequency;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
	  uint16_t  f_lenght    = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	847b      	strh	r3, [r7, #34]	@ 0x22
	  char send_buff[RAW_LENGTH]  ={'0'};
 80010c4:	2330      	movs	r3, #48	@ 0x30
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
	  if(frequency){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d014      	beq.n	8001104 <SendDataLCDUSB+0x50>
		  sprintf(send_buff, "%d",(uint32_t)frequency);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	492e      	ldr	r1, [pc, #184]	@ (800119c <SendDataLCDUSB+0xe8>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fc8e 	bl	8004a04 <siprintf>
		  while (temp){
 80010e8:	e008      	b.n	80010fc <SendDataLCDUSB+0x48>
			  temp /= 10;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <SendDataLCDUSB+0xec>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
			  f_lenght++;
 80010f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80010f8:	3301      	adds	r3, #1
 80010fa:	847b      	strh	r3, [r7, #34]	@ 0x22
		  while (temp){
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f3      	bne.n	80010ea <SendDataLCDUSB+0x36>
 8001102:	e008      	b.n	8001116 <SendDataLCDUSB+0x62>
		  }
	  }else{
		  sprintf(send_buff, "%s","NOT_READY");
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <SendDataLCDUSB+0xf0>)
 800110a:	4927      	ldr	r1, [pc, #156]	@ (80011a8 <SendDataLCDUSB+0xf4>)
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fc79 	bl	8004a04 <siprintf>
		  f_lenght = ERR_MESSAGE_LENGTH;
 8001112:	2309      	movs	r3, #9
 8001114:	847b      	strh	r3, [r7, #34]	@ 0x22
	  }
	  HD44780_Clear();
 8001116:	f7ff fac7 	bl	80006a8 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fad9 	bl	80006d4 <HD44780_SetCursor>
	  for (int i = 0; i < f_lenght; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e00a      	b.n	800113e <SendDataLCDUSB+0x8a>
		  HD44780_PrintSpecialChar(send_buff[i]);
 8001128:	f107 020c 	add.w	r2, r7, #12
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fb3f 	bl	80007b6 <HD44780_PrintSpecialChar>
	  for (int i = 0; i < f_lenght; i++){
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <SendDataLCDUSB+0x74>
	  }
	  if(frequency){
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00f      	beq.n	800116c <SendDataLCDUSB+0xb8>
		  HD44780_PrintStr("HZ");
 800114c:	4817      	ldr	r0, [pc, #92]	@ (80011ac <SendDataLCDUSB+0xf8>)
 800114e:	f7ff fb3f 	bl	80007d0 <HD44780_PrintStr>
	  	  memcpy(send_buff+f_lenght,"HZ\r\n",5);
 8001152:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	4413      	add	r3, r2
 800115a:	2205      	movs	r2, #5
 800115c:	4914      	ldr	r1, [pc, #80]	@ (80011b0 <SendDataLCDUSB+0xfc>)
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fca4 	bl	8004aac <memcpy>
	  	  f_lenght+=5;
 8001164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001166:	3305      	adds	r3, #5
 8001168:	847b      	strh	r3, [r7, #34]	@ 0x22
 800116a:	e00b      	b.n	8001184 <SendDataLCDUSB+0xd0>
	  }else{
		  memcpy(send_buff+f_lenght,"\r\n",3);
 800116c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	4413      	add	r3, r2
 8001174:	2203      	movs	r2, #3
 8001176:	490f      	ldr	r1, [pc, #60]	@ (80011b4 <SendDataLCDUSB+0x100>)
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fc97 	bl	8004aac <memcpy>
		  f_lenght+=3;
 800117e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001180:	3303      	adds	r3, #3
 8001182:	847b      	strh	r3, [r7, #34]	@ 0x22
	  }
	  HAL_UART_Transmit(&huart4, send_buff,f_lenght, HAL_MAX_DELAY);
 8001184:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <SendDataLCDUSB+0x104>)
 8001190:	f003 f87c 	bl	800428c <HAL_UART_Transmit>

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	0800536c 	.word	0x0800536c
 80011a0:	cccccccd 	.word	0xcccccccd
 80011a4:	08005370 	.word	0x08005370
 80011a8:	0800537c 	.word	0x0800537c
 80011ac:	08005380 	.word	0x08005380
 80011b0:	08005384 	.word	0x08005384
 80011b4:	0800538c 	.word	0x0800538c
 80011b8:	20000174 	.word	0x20000174

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f8ed 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001222:	f002 f8cd 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000e4 	.word	0x200000e4

08001230 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  SendDataLCDUSB(htim2.Instance->CNT);
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <TIM1_CC_IRQHandler+0x1c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff3a 	bl	80010b4 <SendDataLCDUSB>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <TIM1_CC_IRQHandler+0x20>)
 8001242:	f002 f8bd 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000012c 	.word	0x2000012c
 8001250:	200000e4 	.word	0x200000e4

08001254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <TIM2_IRQHandler+0x10>)
 800125a:	f002 f8b1 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000012c 	.word	0x2000012c

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f003 fbdc 	bl	8004a54 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20020000 	.word	0x20020000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200001bc 	.word	0x200001bc
 80012d0:	20000310 	.word	0x20000310

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001330 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012fc:	f7ff ffea 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	@ (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001326:	f003 fb9b 	bl	8004a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fb41 	bl	80009b0 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800133c:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 8001340:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001344:	2000030c 	.word	0x2000030c

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f94f 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fd6c 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f967 	bl	8001682 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f92f 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000010 	.word	0x20000010
 80013e8:	20000018 	.word	0x20000018
 80013ec:	20000014 	.word	0x20000014

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000018 	.word	0x20000018
 8001414:	200001c0 	.word	0x200001c0

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200001c0 	.word	0x200001c0

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000018 	.word	0x20000018

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	@ (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	@ (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	@ (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	@ 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e165      	b.n	8001984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8154 	bne.w	800197e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ae 	beq.w	800197e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b5d      	ldr	r3, [pc, #372]	@ (800199c <HAL_GPIO_Init+0x300>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a5c      	ldr	r2, [pc, #368]	@ (800199c <HAL_GPIO_Init+0x300>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	@ (80019a4 <HAL_GPIO_Init+0x308>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x21a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <HAL_GPIO_Init+0x30c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x216>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <HAL_GPIO_Init+0x310>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x212>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4c      	ldr	r2, [pc, #304]	@ (80019b0 <HAL_GPIO_Init+0x314>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x20e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4b      	ldr	r2, [pc, #300]	@ (80019b4 <HAL_GPIO_Init+0x318>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x20a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_GPIO_Init+0x31c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x206>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a49      	ldr	r2, [pc, #292]	@ (80019bc <HAL_GPIO_Init+0x320>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x202>
 800189a:	2306      	movs	r3, #6
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x21c>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a31      	ldr	r2, [pc, #196]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192a:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194e:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001978:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <HAL_GPIO_Init+0x324>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae96 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e12b      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fa5e 	bl	8000eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a28:	f000 fdac 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a81      	ldr	r2, [pc, #516]	@ (8001c38 <HAL_I2C_Init+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d807      	bhi.n	8001a48 <HAL_I2C_Init+0x84>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a80      	ldr	r2, [pc, #512]	@ (8001c3c <HAL_I2C_Init+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x92>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c40 <HAL_I2C_Init+0x27c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0e7      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a78      	ldr	r2, [pc, #480]	@ (8001c44 <HAL_I2C_Init+0x280>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c38 <HAL_I2C_Init+0x274>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d802      	bhi.n	8001a98 <HAL_I2C_Init+0xd4>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	e009      	b.n	8001aac <HAL_I2C_Init+0xe8>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a69      	ldr	r2, [pc, #420]	@ (8001c48 <HAL_I2C_Init+0x284>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	495c      	ldr	r1, [pc, #368]	@ (8001c38 <HAL_I2C_Init+0x274>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d819      	bhi.n	8001b00 <HAL_I2C_Init+0x13c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_I2C_Init+0x138>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e59      	subs	r1, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afa:	e051      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e04f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_I2C_Init+0x168>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e012      	b.n	8001b52 <HAL_I2C_Init+0x18e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x196>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e022      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <HAL_I2C_Init+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e58      	subs	r0, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b7e:	e00f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6911      	ldr	r1, [r2, #16]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68d2      	ldr	r2, [r2, #12]
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	000186a0 	.word	0x000186a0
 8001c3c:	001e847f 	.word	0x001e847f
 8001c40:	003d08ff 	.word	0x003d08ff
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fbda 	bl	8001418 <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	f040 80e0 	bne.w	8001e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4970      	ldr	r1, [pc, #448]	@ (8001e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f964 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0d3      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_Master_Transmit+0x50>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0cc      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d007      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2221      	movs	r2, #33	@ 0x21
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	893a      	ldrh	r2, [r7, #8]
 8001cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a50      	ldr	r2, [pc, #320]	@ (8001e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6a3a      	ldr	r2, [r7, #32]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f89c 	bl	8001e48 <I2C_MasterRequestWrite>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e08d      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d30:	e066      	b.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fa22 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d107      	bne.n	8001d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d017      	beq.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fa19 	bl	8002210 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e01a      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d194      	bne.n	8001d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00100002 	.word	0x00100002
 8001e44:	ffff0000 	.word	0xffff0000

08001e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d006      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d107      	bne.n	8001e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f84f 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec2:	d103      	bne.n	8001ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e035      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e01b      	b.n	8001f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030f 	orn	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <I2C_MasterRequestWrite+0xfc>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f898 	bl	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e010      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <I2C_MasterRequestWrite+0x100>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f888 	bl	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010008 	.word	0x00010008
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f5c:	e048      	b.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d044      	beq.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7ff fa57 	bl	8001418 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d139      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10d      	bne.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	e00c      	b.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d116      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e023      	b.n	8002038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10d      	bne.n	8002016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	e00c      	b.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	429a      	cmp	r2, r3
 8002034:	d093      	beq.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800204e:	e071      	b.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d123      	bne.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800206e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e067      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d041      	beq.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b0:	f7ff f9b2 	bl	8001418 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d302      	bcc.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d136      	bne.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10c      	bne.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e00b      	b.n	8002102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e021      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10c      	bne.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	43da      	mvns	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4013      	ands	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e00b      	b.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4013      	ands	r3, r2
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f af6d 	bne.w	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218c:	e034      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f886 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e034      	b.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d028      	beq.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff f937 	bl	8001418 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	2b80      	cmp	r3, #128	@ 0x80
 80021c8:	d016      	beq.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b80      	cmp	r3, #128	@ 0x80
 8002204:	d1c3      	bne.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800221c:	e034      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f83e 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e034      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d028      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff f8ef 	bl	8001418 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11d      	bne.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b04      	cmp	r3, #4
 8002258:	d016      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1c3      	bne.n	800221e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b6:	d11b      	bne.n	80022f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a1f      	ldr	r2, [pc, #124]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_PWREx_EnableOverDrive+0x94>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232c:	f7ff f874 	bl	8001418 <HAL_GetTick>
 8002330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002332:	e009      	b.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002334:	f7ff f870 	bl	8001418 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002342:	d901      	bls.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e01f      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d1ee      	bne.n	8002334 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7ff f85c 	bl	8001418 <HAL_GetTick>
 8002360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002362:	e009      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002364:	f7ff f858 	bl	8001418 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002372:	d901      	bls.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e007      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002384:	d1ee      	bne.n	8002364 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	420e0040 	.word	0x420e0040
 8002398:	40007000 	.word	0x40007000
 800239c:	420e0044 	.word	0x420e0044

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cc      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b68      	ldr	r3, [pc, #416]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b65      	ldr	r3, [pc, #404]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a52      	ldr	r2, [pc, #328]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b3f      	ldr	r3, [pc, #252]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e067      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b37      	ldr	r3, [pc, #220]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4934      	ldr	r1, [pc, #208]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe ffc2 	bl	8001418 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe ffbe 	bl	8001418 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20c      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f855 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe ff22 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00
 800255c:	40023800 	.word	0x40023800
 8002560:	08005390 	.word	0x08005390
 8002564:	20000010 	.word	0x20000010
 8002568:	20000014 	.word	0x20000014

0800256c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000010 	.word	0x20000010

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	080053a0 	.word	0x080053a0

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025b0:	f7ff ffdc 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0b5b      	lsrs	r3, r3, #13
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	080053a0 	.word	0x080053a0

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0ae      	sub	sp, #184	@ 0xb8
 80025da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b0c      	cmp	r3, #12
 8002604:	f200 8206 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x440>
 8002608:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002645 	.word	0x08002645
 8002614:	08002a15 	.word	0x08002a15
 8002618:	08002a15 	.word	0x08002a15
 800261c:	08002a15 	.word	0x08002a15
 8002620:	0800264d 	.word	0x0800264d
 8002624:	08002a15 	.word	0x08002a15
 8002628:	08002a15 	.word	0x08002a15
 800262c:	08002a15 	.word	0x08002a15
 8002630:	08002655 	.word	0x08002655
 8002634:	08002a15 	.word	0x08002a15
 8002638:	08002a15 	.word	0x08002a15
 800263c:	08002a15 	.word	0x08002a15
 8002640:	08002845 	.word	0x08002845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4bb9      	ldr	r3, [pc, #740]	@ (800292c <HAL_RCC_GetSysClockFreq+0x358>)
 8002646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800264a:	e1e7      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264c:	4bb8      	ldr	r3, [pc, #736]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002652:	e1e3      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4bb4      	ldr	r3, [pc, #720]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002660:	4bb1      	ldr	r3, [pc, #708]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d071      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4bae      	ldr	r3, [pc, #696]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002678:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800268e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026c4:	4649      	mov	r1, r9
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4641      	mov	r1, r8
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4641      	mov	r1, r8
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4641      	mov	r1, r8
 80026d4:	1a51      	subs	r1, r2, r1
 80026d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026d8:	4649      	mov	r1, r9
 80026da:	eb63 0301 	sbc.w	r3, r3, r1
 80026de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026ec:	4649      	mov	r1, r9
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4641      	mov	r1, r8
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4641      	mov	r1, r8
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4622      	mov	r2, r4
 8002702:	189b      	adds	r3, r3, r2
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30
 8002706:	462b      	mov	r3, r5
 8002708:	460a      	mov	r2, r1
 800270a:	eb42 0303 	adc.w	r3, r2, r3
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800271c:	4629      	mov	r1, r5
 800271e:	024b      	lsls	r3, r1, #9
 8002720:	4621      	mov	r1, r4
 8002722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002726:	4621      	mov	r1, r4
 8002728:	024a      	lsls	r2, r1, #9
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800273c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002740:	f7fd fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800274e:	e067      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800275c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800276a:	2300      	movs	r3, #0
 800276c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800276e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4621      	mov	r1, r4
 800278c:	1a51      	subs	r1, r2, r1
 800278e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002790:	4629      	mov	r1, r5
 8002792:	eb63 0301 	sbc.w	r3, r3, r1
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027a4:	4649      	mov	r1, r9
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ae:	4641      	mov	r1, r8
 80027b0:	018a      	lsls	r2, r1, #6
 80027b2:	4641      	mov	r1, r8
 80027b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027b8:	4649      	mov	r1, r9
 80027ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d2:	4692      	mov	sl, r2
 80027d4:	469b      	mov	fp, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb1a 0303 	adds.w	r3, sl, r3
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	462b      	mov	r3, r5
 80027e0:	eb4b 0303 	adc.w	r3, fp, r3
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002808:	2200      	movs	r2, #0
 800280a:	673b      	str	r3, [r7, #112]	@ 0x70
 800280c:	677a      	str	r2, [r7, #116]	@ 0x74
 800280e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002812:	f7fd fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4613      	mov	r3, r2
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002820:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002842:	e0eb      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800284c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002850:	4b35      	ldr	r3, [pc, #212]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d06b      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285c:	4b32      	ldr	r3, [pc, #200]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002870:	2300      	movs	r3, #0
 8002872:	667b      	str	r3, [r7, #100]	@ 0x64
 8002874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002878:	4622      	mov	r2, r4
 800287a:	462b      	mov	r3, r5
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	0159      	lsls	r1, r3, #5
 8002886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288a:	0150      	lsls	r0, r2, #5
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4621      	mov	r1, r4
 8002892:	1a51      	subs	r1, r2, r1
 8002894:	61b9      	str	r1, [r7, #24]
 8002896:	4629      	mov	r1, r5
 8002898:	eb63 0301 	sbc.w	r3, r3, r1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028aa:	4659      	mov	r1, fp
 80028ac:	018b      	lsls	r3, r1, #6
 80028ae:	4651      	mov	r1, sl
 80028b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b4:	4651      	mov	r1, sl
 80028b6:	018a      	lsls	r2, r1, #6
 80028b8:	4651      	mov	r1, sl
 80028ba:	ebb2 0801 	subs.w	r8, r2, r1
 80028be:	4659      	mov	r1, fp
 80028c0:	eb63 0901 	sbc.w	r9, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d8:	4690      	mov	r8, r2
 80028da:	4699      	mov	r9, r3
 80028dc:	4623      	mov	r3, r4
 80028de:	eb18 0303 	adds.w	r3, r8, r3
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	462b      	mov	r3, r5
 80028e6:	eb49 0303 	adc.w	r3, r9, r3
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028f8:	4629      	mov	r1, r5
 80028fa:	024b      	lsls	r3, r1, #9
 80028fc:	4621      	mov	r1, r4
 80028fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002902:	4621      	mov	r1, r4
 8002904:	024a      	lsls	r2, r1, #9
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800290e:	2200      	movs	r2, #0
 8002910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002912:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002918:	f7fd fcca 	bl	80002b0 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002926:	e065      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x420>
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400
 8002930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	2200      	movs	r2, #0
 800293c:	4618      	mov	r0, r3
 800293e:	4611      	mov	r1, r2
 8002940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002944:	653b      	str	r3, [r7, #80]	@ 0x50
 8002946:	2300      	movs	r3, #0
 8002948:	657b      	str	r3, [r7, #84]	@ 0x54
 800294a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4641      	mov	r1, r8
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	4649      	mov	r1, r9
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002980:	4659      	mov	r1, fp
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	4651      	mov	r1, sl
 8002986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298a:	4651      	mov	r1, sl
 800298c:	018a      	lsls	r2, r1, #6
 800298e:	4651      	mov	r1, sl
 8002990:	1a54      	subs	r4, r2, r1
 8002992:	4659      	mov	r1, fp
 8002994:	eb63 0501 	sbc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	464b      	mov	r3, r9
 80029b4:	eb45 0303 	adc.w	r3, r5, r3
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c6:	4629      	mov	r1, r5
 80029c8:	028b      	lsls	r3, r1, #10
 80029ca:	4621      	mov	r1, r4
 80029cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d0:	4621      	mov	r1, r4
 80029d2:	028a      	lsls	r2, r1, #10
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029dc:	2200      	movs	r2, #0
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e6:	f7fd fc63 	bl	80002b0 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4613      	mov	r3, r2
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0f1b      	lsrs	r3, r3, #28
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a12:	e003      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	37b8      	adds	r7, #184	@ 0xb8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400

08002a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e28d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8083 	beq.w	8002b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a54:	4b94      	ldr	r3, [pc, #592]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d019      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a60:	4b91      	ldr	r3, [pc, #580]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b88      	ldr	r3, [pc, #544]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b84      	ldr	r3, [pc, #528]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x124>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e25a      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x90>
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7b      	ldr	r2, [pc, #492]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xb4>
 8002ace:	4b76      	ldr	r3, [pc, #472]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b73      	ldr	r3, [pc, #460]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a72      	ldr	r2, [pc, #456]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fc86 	bl	8001418 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fc82 	bl	8001418 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e21f      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xdc>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fc72 	bl	8001418 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fc6e 	bl	8001418 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20b      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x104>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06f      	beq.n	8002c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b66:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b44      	ldr	r3, [pc, #272]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1d3      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4937      	ldr	r1, [pc, #220]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_RCC_OscConfig+0x278>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fc1b 	bl	8001418 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fc17 	bl	8001418 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1b4      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4925      	ldr	r1, [pc, #148]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <HAL_RCC_OscConfig+0x278>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fbfa 	bl	8001418 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fbf6 	bl	8001418 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e193      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d036      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fbda 	bl	8001418 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fbd6 	bl	8001418 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e173      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x234>
 8002c86:	e01b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fbc3 	bl	8001418 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e00e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fbbf 	bl	8001418 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d907      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e15c      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	42470000 	.word	0x42470000
 8002cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8097 	beq.w	8002dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b79      	ldr	r3, [pc, #484]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fb7f 	bl	8001418 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fb7b 	bl	8001418 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e118      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x31e>
 8002d44:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a65      	ldr	r2, [pc, #404]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	e01c      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x340>
 8002d5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	4a60      	ldr	r2, [pc, #384]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d66:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a59      	ldr	r2, [pc, #356]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d84:	4a56      	ldr	r2, [pc, #344]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fb40 	bl	8001418 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fb3c 	bl	8001418 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0d7      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ee      	beq.n	8002d9c <HAL_RCC_OscConfig+0x368>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fb2a 	bl	8001418 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fb26 	bl	8001418 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0c1      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ad 	beq.w	8002f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e06:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d060      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d145      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fafa 	bl	8001418 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe faf6 	bl	8001418 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e093      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	491b      	ldr	r1, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe facb 	bl	8001418 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fac7 	bl	8001418 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e064      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x452>
 8002ea4:	e05c      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fab4 	bl	8001418 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fab0 	bl	8001418 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x480>
 8002ed2:	e045      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e040      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <HAL_RCC_OscConfig+0x538>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d030      	beq.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d129      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d122      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d119      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd ffd0 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fc8e 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e046      	b.n	80030b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a23      	ldr	r2, [pc, #140]	@ (80030c4 <HAL_TIM_Base_Start+0xb4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d022      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003042:	d01d      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <HAL_TIM_Base_Start+0xb8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d018      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_TIM_Base_Start+0xbc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <HAL_TIM_Base_Start+0xc0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <HAL_TIM_Base_Start+0xc4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a19      	ldr	r2, [pc, #100]	@ (80030d8 <HAL_TIM_Base_Start+0xc8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIM_Base_Start+0x70>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a18      	ldr	r2, [pc, #96]	@ (80030dc <HAL_TIM_Base_Start+0xcc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d010      	beq.n	80030b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	e007      	b.n	80030b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40001800 	.word	0x40001800

080030e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e041      	b.n	8003176 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f839 	bl	800317e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f000 fbd6 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_TIM_OC_Start_IT+0x28>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e022      	b.n	8003202 <HAL_TIM_OC_Start_IT+0x6e>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d109      	bne.n	80031d6 <HAL_TIM_OC_Start_IT+0x42>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e015      	b.n	8003202 <HAL_TIM_OC_Start_IT+0x6e>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d109      	bne.n	80031f0 <HAL_TIM_OC_Start_IT+0x5c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e008      	b.n	8003202 <HAL_TIM_OC_Start_IT+0x6e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0c7      	b.n	800339a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <HAL_TIM_OC_Start_IT+0x86>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003218:	e013      	b.n	8003242 <HAL_TIM_OC_Start_IT+0xae>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d104      	bne.n	800322a <HAL_TIM_OC_Start_IT+0x96>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003228:	e00b      	b.n	8003242 <HAL_TIM_OC_Start_IT+0xae>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d104      	bne.n	800323a <HAL_TIM_OC_Start_IT+0xa6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003238:	e003      	b.n	8003242 <HAL_TIM_OC_Start_IT+0xae>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d841      	bhi.n	80032cc <HAL_TIM_OC_Start_IT+0x138>
 8003248:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <HAL_TIM_OC_Start_IT+0xbc>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003285 	.word	0x08003285
 8003254:	080032cd 	.word	0x080032cd
 8003258:	080032cd 	.word	0x080032cd
 800325c:	080032cd 	.word	0x080032cd
 8003260:	08003297 	.word	0x08003297
 8003264:	080032cd 	.word	0x080032cd
 8003268:	080032cd 	.word	0x080032cd
 800326c:	080032cd 	.word	0x080032cd
 8003270:	080032a9 	.word	0x080032a9
 8003274:	080032cd 	.word	0x080032cd
 8003278:	080032cd 	.word	0x080032cd
 800327c:	080032cd 	.word	0x080032cd
 8003280:	080032bb 	.word	0x080032bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0202 	orr.w	r2, r2, #2
 8003292:	60da      	str	r2, [r3, #12]
      break;
 8003294:	e01d      	b.n	80032d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0204 	orr.w	r2, r2, #4
 80032a4:	60da      	str	r2, [r3, #12]
      break;
 80032a6:	e014      	b.n	80032d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	60da      	str	r2, [r3, #12]
      break;
 80032b8:	e00b      	b.n	80032d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0210 	orr.w	r2, r2, #16
 80032c8:	60da      	str	r2, [r3, #12]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d15f      	bne.n	8003398 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fe7c 	bl	8003fde <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2e      	ldr	r2, [pc, #184]	@ (80033a4 <HAL_TIM_OC_Start_IT+0x210>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_TIM_OC_Start_IT+0x166>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	@ (80033a8 <HAL_TIM_OC_Start_IT+0x214>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_OC_Start_IT+0x16a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_TIM_OC_Start_IT+0x16c>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a22      	ldr	r2, [pc, #136]	@ (80033a4 <HAL_TIM_OC_Start_IT+0x210>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d01d      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <HAL_TIM_OC_Start_IT+0x218>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <HAL_TIM_OC_Start_IT+0x21c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <HAL_TIM_OC_Start_IT+0x220>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <HAL_TIM_OC_Start_IT+0x214>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_TIM_OC_Start_IT+0x224>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_OC_Start_IT+0x1d0>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <HAL_TIM_OC_Start_IT+0x228>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d010      	beq.n	8003398 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	e007      	b.n	8003398 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40001800 	.word	0x40001800

080033c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0202 	mvn.w	r2, #2
 80033f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa41 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa33 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fa44 	bl	80038a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0204 	mvn.w	r2, #4
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa1b 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa0d 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa1e 	bl	80038a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d020      	beq.n	80034bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01b      	beq.n	80034bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0208 	mvn.w	r2, #8
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2204      	movs	r2, #4
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9f5 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9e7 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9f8 	bl	80038a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d020      	beq.n	8003508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01b      	beq.n	8003508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0210 	mvn.w	r2, #16
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2208      	movs	r2, #8
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9cf 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9c1 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9d2 	bl	80038a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0201 	mvn.w	r2, #1
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f99f 	bl	800386a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00c      	beq.n	8003550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fe44 	bl	80041d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9a3 	bl	80038ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fe16 	bl	80041c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_OC_ConfigChannel+0x1e>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e048      	b.n	8003650 <HAL_TIM_OC_ConfigChannel+0xb0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d839      	bhi.n	8003640 <HAL_TIM_OC_ConfigChannel+0xa0>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003641 	.word	0x08003641
 80035dc:	08003641 	.word	0x08003641
 80035e0:	08003641 	.word	0x08003641
 80035e4:	08003617 	.word	0x08003617
 80035e8:	08003641 	.word	0x08003641
 80035ec:	08003641 	.word	0x08003641
 80035f0:	08003641 	.word	0x08003641
 80035f4:	08003625 	.word	0x08003625
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003641 	.word	0x08003641
 8003604:	08003633 	.word	0x08003633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa0a 	bl	8003a28 <TIM_OC1_SetConfig>
      break;
 8003614:	e017      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa73 	bl	8003b08 <TIM_OC2_SetConfig>
      break;
 8003622:	e010      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fae2 	bl	8003bf4 <TIM_OC3_SetConfig>
      break;
 8003630:	e009      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fb4f 	bl	8003cdc <TIM_OC4_SetConfig>
      break;
 800363e:	e002      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      break;
 8003644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIM_ConfigClockSource+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e0b4      	b.n	80037de <HAL_TIM_ConfigClockSource+0x186>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800369a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ac:	d03e      	beq.n	800372c <HAL_TIM_ConfigClockSource+0xd4>
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b2:	f200 8087 	bhi.w	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	f000 8086 	beq.w	80037ca <HAL_TIM_ConfigClockSource+0x172>
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c2:	d87f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b70      	cmp	r3, #112	@ 0x70
 80036c6:	d01a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0xa6>
 80036c8:	2b70      	cmp	r3, #112	@ 0x70
 80036ca:	d87b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b60      	cmp	r3, #96	@ 0x60
 80036ce:	d050      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x11a>
 80036d0:	2b60      	cmp	r3, #96	@ 0x60
 80036d2:	d877      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b50      	cmp	r3, #80	@ 0x50
 80036d6:	d03c      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0xfa>
 80036d8:	2b50      	cmp	r3, #80	@ 0x50
 80036da:	d873      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b40      	cmp	r3, #64	@ 0x40
 80036de:	d058      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x13a>
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d86f      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b30      	cmp	r3, #48	@ 0x30
 80036e6:	d064      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036e8:	2b30      	cmp	r3, #48	@ 0x30
 80036ea:	d86b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d060      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d867      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05c      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d05a      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	e062      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800370e:	f000 fc46 	bl	8003f9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
      break;
 800372a:	e04f      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	f000 fc2f 	bl	8003f9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800374e:	609a      	str	r2, [r3, #8]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	461a      	mov	r2, r3
 8003760:	f000 fba3 	bl	8003eaa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2150      	movs	r1, #80	@ 0x50
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fbfc 	bl	8003f68 <TIM_ITRx_SetConfig>
      break;
 8003770:	e02c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	461a      	mov	r2, r3
 8003780:	f000 fbc2 	bl	8003f08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2160      	movs	r1, #96	@ 0x60
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fbec 	bl	8003f68 <TIM_ITRx_SetConfig>
      break;
 8003790:	e01c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 fb83 	bl	8003eaa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fbdc 	bl	8003f68 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e00c      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fbd3 	bl	8003f68 <TIM_ITRx_SetConfig>
      break;
 80037c2:	e003      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e000      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e031      	b.n	8003862 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fab9 	bl	8003d88 <TIM_SlaveTimer_SetConfig>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e018      	b.n	8003862 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800384e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <TIM_Base_SetConfig+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ee:	d00f      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a43      	ldr	r2, [pc, #268]	@ (8003a00 <TIM_Base_SetConfig+0x130>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a42      	ldr	r2, [pc, #264]	@ (8003a04 <TIM_Base_SetConfig+0x134>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a41      	ldr	r2, [pc, #260]	@ (8003a08 <TIM_Base_SetConfig+0x138>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a40      	ldr	r2, [pc, #256]	@ (8003a0c <TIM_Base_SetConfig+0x13c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a35      	ldr	r2, [pc, #212]	@ (80039fc <TIM_Base_SetConfig+0x12c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02b      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003930:	d027      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a32      	ldr	r2, [pc, #200]	@ (8003a00 <TIM_Base_SetConfig+0x130>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d023      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <TIM_Base_SetConfig+0x134>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01f      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a30      	ldr	r2, [pc, #192]	@ (8003a08 <TIM_Base_SetConfig+0x138>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01b      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a0c <TIM_Base_SetConfig+0x13c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d017      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2e      	ldr	r2, [pc, #184]	@ (8003a10 <TIM_Base_SetConfig+0x140>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a14 <TIM_Base_SetConfig+0x144>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <TIM_Base_SetConfig+0x148>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <TIM_Base_SetConfig+0x14c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <TIM_Base_SetConfig+0x150>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a29      	ldr	r2, [pc, #164]	@ (8003a24 <TIM_Base_SetConfig+0x154>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <TIM_Base_SetConfig+0x12c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0xf8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a12      	ldr	r2, [pc, #72]	@ (8003a0c <TIM_Base_SetConfig+0x13c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]
  }
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0201 	bic.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 0302 	bic.w	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a20      	ldr	r2, [pc, #128]	@ (8003b00 <TIM_OC1_SetConfig+0xd8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_OC1_SetConfig+0x64>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <TIM_OC1_SetConfig+0xdc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10c      	bne.n	8003aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0308 	bic.w	r3, r3, #8
 8003a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <TIM_OC1_SetConfig+0xd8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_OC1_SetConfig+0x8e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a14      	ldr	r2, [pc, #80]	@ (8003b04 <TIM_OC1_SetConfig+0xdc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40010400 	.word	0x40010400

08003b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 0210 	bic.w	r2, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0320 	bic.w	r3, r3, #32
 8003b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <TIM_OC2_SetConfig+0xe4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_OC2_SetConfig+0x68>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <TIM_OC2_SetConfig+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10d      	bne.n	8003b8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <TIM_OC2_SetConfig+0xe4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC2_SetConfig+0x94>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <TIM_OC2_SetConfig+0xe8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d113      	bne.n	8003bc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <TIM_OC3_SetConfig+0xe0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC3_SetConfig+0x66>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <TIM_OC3_SetConfig+0xe4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10d      	bne.n	8003c76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <TIM_OC3_SetConfig+0xe0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC3_SetConfig+0x92>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <TIM_OC3_SetConfig+0xe4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d113      	bne.n	8003cae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40010400 	.word	0x40010400

08003cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <TIM_OC4_SetConfig+0xa4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC4_SetConfig+0x68>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	@ (8003d84 <TIM_OC4_SetConfig+0xa8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d109      	bne.n	8003d58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40010400 	.word	0x40010400

08003d88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b70      	cmp	r3, #112	@ 0x70
 8003dd0:	d01a      	beq.n	8003e08 <TIM_SlaveTimer_SetConfig+0x80>
 8003dd2:	2b70      	cmp	r3, #112	@ 0x70
 8003dd4:	d860      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003dd6:	2b60      	cmp	r3, #96	@ 0x60
 8003dd8:	d054      	beq.n	8003e84 <TIM_SlaveTimer_SetConfig+0xfc>
 8003dda:	2b60      	cmp	r3, #96	@ 0x60
 8003ddc:	d85c      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003dde:	2b50      	cmp	r3, #80	@ 0x50
 8003de0:	d046      	beq.n	8003e70 <TIM_SlaveTimer_SetConfig+0xe8>
 8003de2:	2b50      	cmp	r3, #80	@ 0x50
 8003de4:	d858      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d019      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x96>
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d854      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003dee:	2b30      	cmp	r3, #48	@ 0x30
 8003df0:	d055      	beq.n	8003e9e <TIM_SlaveTimer_SetConfig+0x116>
 8003df2:	2b30      	cmp	r3, #48	@ 0x30
 8003df4:	d850      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d051      	beq.n	8003e9e <TIM_SlaveTimer_SetConfig+0x116>
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d84c      	bhi.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d04d      	beq.n	8003e9e <TIM_SlaveTimer_SetConfig+0x116>
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d04b      	beq.n	8003e9e <TIM_SlaveTimer_SetConfig+0x116>
 8003e06:	e047      	b.n	8003e98 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	f000 f8c1 	bl	8003f9e <TIM_ETR_SetConfig>
      break;
 8003e1c:	e040      	b.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d101      	bne.n	8003e2a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e03b      	b.n	8003ea2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e50:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
      break;
 8003e6e:	e017      	b.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f000 f814 	bl	8003eaa <TIM_TI1_ConfigInputStage>
      break;
 8003e82:	e00d      	b.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 f839 	bl	8003f08 <TIM_TI2_ConfigInputStage>
      break;
 8003e96:	e003      	b.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e000      	b.n	8003ea0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e9e:	bf00      	nop
  }

  return status;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b087      	sub	sp, #28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f023 0201 	bic.w	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 030a 	bic.w	r3, r3, #10
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0210 	bic.w	r2, r3, #16
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	031b      	lsls	r3, r3, #12
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	621a      	str	r2, [r3, #32]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f043 0307 	orr.w	r3, r3, #7
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	609a      	str	r2, [r3, #8]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	609a      	str	r2, [r3, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	401a      	ands	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	431a      	orrs	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800403c:	2302      	movs	r3, #2
 800403e:	e05a      	b.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408c:	d01d      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d018      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a15      	ldr	r2, [pc, #84]	@ (800411c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10c      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40001800 	.word	0x40001800

08004120 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004138:	2302      	movs	r3, #2
 800413a:	e03d      	b.n	80041b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e042      	b.n	8004284 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fc ff06 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	@ 0x24
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800422e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f973 	bl	800451c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	@ 0x28
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d175      	bne.n	8004398 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_UART_Transmit+0x2c>
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e06e      	b.n	800439a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2221      	movs	r2, #33	@ 0x21
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ca:	f7fd f8a5 	bl	8001418 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e4:	d108      	bne.n	80042f8 <HAL_UART_Transmit+0x6c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e003      	b.n	8004300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004300:	e02e      	b.n	8004360 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2180      	movs	r1, #128	@ 0x80
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f848 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e03a      	b.n	800439a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	3302      	adds	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	e007      	b.n	8004352 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	3301      	adds	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1cb      	bne.n	8004302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2140      	movs	r1, #64	@ 0x40
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f814 	bl	80043a2 <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b2:	e03b      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d037      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043bc:	f7fd f82c 	bl	8001418 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	6a3a      	ldr	r2, [r7, #32]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d302      	bcc.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e03a      	b.n	800444c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d020      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d01d      	beq.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d116      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f81d 	bl	8004454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2208      	movs	r2, #8
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e00f      	b.n	800444c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	429a      	cmp	r2, r3
 8004448:	d0b4      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b095      	sub	sp, #84	@ 0x54
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800447c:	643a      	str	r2, [r7, #64]	@ 0x40
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	@ 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b0c0      	sub	sp, #256	@ 0x100
 8004522:	af00      	add	r7, sp, #0
 8004524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	68d9      	ldr	r1, [r3, #12]
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	ea40 0301 	orr.w	r3, r0, r1
 8004544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	431a      	orrs	r2, r3
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	431a      	orrs	r2, r3
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004574:	f021 010c 	bic.w	r1, r1, #12
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004582:	430b      	orrs	r3, r1
 8004584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	6999      	ldr	r1, [r3, #24]
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	ea40 0301 	orr.w	r3, r0, r1
 80045a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b8f      	ldr	r3, [pc, #572]	@ (80047e8 <UART_SetConfig+0x2cc>)
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d005      	beq.n	80045bc <UART_SetConfig+0xa0>
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b8d      	ldr	r3, [pc, #564]	@ (80047ec <UART_SetConfig+0x2d0>)
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d104      	bne.n	80045c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7fd fff6 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 80045c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045c4:	e003      	b.n	80045ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045c6:	f7fd ffdd 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80045ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d8:	f040 810c 	bne.w	80047f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045f6:	415b      	adcs	r3, r3
 80045f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045fe:	4621      	mov	r1, r4
 8004600:	eb12 0801 	adds.w	r8, r2, r1
 8004604:	4629      	mov	r1, r5
 8004606:	eb43 0901 	adc.w	r9, r3, r1
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800461a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800461e:	4690      	mov	r8, r2
 8004620:	4699      	mov	r9, r3
 8004622:	4623      	mov	r3, r4
 8004624:	eb18 0303 	adds.w	r3, r8, r3
 8004628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800462c:	462b      	mov	r3, r5
 800462e:	eb49 0303 	adc.w	r3, r9, r3
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800464a:	460b      	mov	r3, r1
 800464c:	18db      	adds	r3, r3, r3
 800464e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004650:	4613      	mov	r3, r2
 8004652:	eb42 0303 	adc.w	r3, r2, r3
 8004656:	657b      	str	r3, [r7, #84]	@ 0x54
 8004658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800465c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004660:	f7fb fe26 	bl	80002b0 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <UART_SetConfig+0x2d4>)
 800466a:	fba3 2302 	umull	r2, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	011c      	lsls	r4, r3, #4
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800467c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800468c:	415b      	adcs	r3, r3
 800468e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004694:	4641      	mov	r1, r8
 8004696:	eb12 0a01 	adds.w	sl, r2, r1
 800469a:	4649      	mov	r1, r9
 800469c:	eb43 0b01 	adc.w	fp, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b4:	4692      	mov	sl, r2
 80046b6:	469b      	mov	fp, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	eb1a 0303 	adds.w	r3, sl, r3
 80046be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046c2:	464b      	mov	r3, r9
 80046c4:	eb4b 0303 	adc.w	r3, fp, r3
 80046c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046e0:	460b      	mov	r3, r1
 80046e2:	18db      	adds	r3, r3, r3
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e6:	4613      	mov	r3, r2
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046f6:	f7fb fddb 	bl	80002b0 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <UART_SetConfig+0x2d4>)
 8004702:	fba3 2301 	umull	r2, r3, r3, r1
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2264      	movs	r2, #100	@ 0x64
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	1acb      	subs	r3, r1, r3
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004716:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <UART_SetConfig+0x2d4>)
 8004718:	fba3 2302 	umull	r2, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004724:	441c      	add	r4, r3
 8004726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004740:	415b      	adcs	r3, r3
 8004742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	6339      	str	r1, [r7, #48]	@ 0x30
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800477c:	464b      	mov	r3, r9
 800477e:	460a      	mov	r2, r1
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800479c:	460b      	mov	r3, r1
 800479e:	18db      	adds	r3, r3, r3
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a2:	4613      	mov	r3, r2
 80047a4:	eb42 0303 	adc.w	r3, r2, r3
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047b2:	f7fb fd7d 	bl	80002b0 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <UART_SetConfig+0x2d4>)
 80047bc:	fba3 1302 	umull	r1, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2164      	movs	r1, #100	@ 0x64
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	3332      	adds	r3, #50	@ 0x32
 80047ce:	4a08      	ldr	r2, [pc, #32]	@ (80047f0 <UART_SetConfig+0x2d4>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 0207 	and.w	r2, r3, #7
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4422      	add	r2, r4
 80047e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047e4:	e106      	b.n	80049f4 <UART_SetConfig+0x4d8>
 80047e6:	bf00      	nop
 80047e8:	40011000 	.word	0x40011000
 80047ec:	40011400 	.word	0x40011400
 80047f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004806:	4642      	mov	r2, r8
 8004808:	464b      	mov	r3, r9
 800480a:	1891      	adds	r1, r2, r2
 800480c:	6239      	str	r1, [r7, #32]
 800480e:	415b      	adcs	r3, r3
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
 8004812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004816:	4641      	mov	r1, r8
 8004818:	1854      	adds	r4, r2, r1
 800481a:	4649      	mov	r1, r9
 800481c:	eb43 0501 	adc.w	r5, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	00eb      	lsls	r3, r5, #3
 800482a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482e:	00e2      	lsls	r2, r4, #3
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	4643      	mov	r3, r8
 8004836:	18e3      	adds	r3, r4, r3
 8004838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800483c:	464b      	mov	r3, r9
 800483e:	eb45 0303 	adc.w	r3, r5, r3
 8004842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004862:	4629      	mov	r1, r5
 8004864:	008b      	lsls	r3, r1, #2
 8004866:	4621      	mov	r1, r4
 8004868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800486c:	4621      	mov	r1, r4
 800486e:	008a      	lsls	r2, r1, #2
 8004870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004874:	f7fb fd1c 	bl	80002b0 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4b60      	ldr	r3, [pc, #384]	@ (8004a00 <UART_SetConfig+0x4e4>)
 800487e:	fba3 2302 	umull	r2, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	011c      	lsls	r4, r3, #4
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	61b9      	str	r1, [r7, #24]
 80048a0:	415b      	adcs	r3, r3
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a8:	4641      	mov	r1, r8
 80048aa:	1851      	adds	r1, r2, r1
 80048ac:	6139      	str	r1, [r7, #16]
 80048ae:	4649      	mov	r1, r9
 80048b0:	414b      	adcs	r3, r1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c0:	4659      	mov	r1, fp
 80048c2:	00cb      	lsls	r3, r1, #3
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ca:	4651      	mov	r1, sl
 80048cc:	00ca      	lsls	r2, r1, #3
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	4642      	mov	r2, r8
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048dc:	464b      	mov	r3, r9
 80048de:	460a      	mov	r2, r1
 80048e0:	eb42 0303 	adc.w	r3, r2, r3
 80048e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004900:	4649      	mov	r1, r9
 8004902:	008b      	lsls	r3, r1, #2
 8004904:	4641      	mov	r1, r8
 8004906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800490a:	4641      	mov	r1, r8
 800490c:	008a      	lsls	r2, r1, #2
 800490e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004912:	f7fb fccd 	bl	80002b0 <__aeabi_uldivmod>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4611      	mov	r1, r2
 800491c:	4b38      	ldr	r3, [pc, #224]	@ (8004a00 <UART_SetConfig+0x4e4>)
 800491e:	fba3 2301 	umull	r2, r3, r3, r1
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2264      	movs	r2, #100	@ 0x64
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	1acb      	subs	r3, r1, r3
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	3332      	adds	r3, #50	@ 0x32
 8004930:	4a33      	ldr	r2, [pc, #204]	@ (8004a00 <UART_SetConfig+0x4e4>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800493c:	441c      	add	r4, r3
 800493e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004942:	2200      	movs	r2, #0
 8004944:	673b      	str	r3, [r7, #112]	@ 0x70
 8004946:	677a      	str	r2, [r7, #116]	@ 0x74
 8004948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	1891      	adds	r1, r2, r2
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	415b      	adcs	r3, r3
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800495c:	4641      	mov	r1, r8
 800495e:	1851      	adds	r1, r2, r1
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	4649      	mov	r1, r9
 8004964:	414b      	adcs	r3, r1
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004974:	4659      	mov	r1, fp
 8004976:	00cb      	lsls	r3, r1, #3
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497e:	4651      	mov	r1, sl
 8004980:	00ca      	lsls	r2, r1, #3
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4603      	mov	r3, r0
 8004988:	4642      	mov	r2, r8
 800498a:	189b      	adds	r3, r3, r2
 800498c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800498e:	464b      	mov	r3, r9
 8004990:	460a      	mov	r2, r1
 8004992:	eb42 0303 	adc.w	r3, r2, r3
 8004996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049b0:	4649      	mov	r1, r9
 80049b2:	008b      	lsls	r3, r1, #2
 80049b4:	4641      	mov	r1, r8
 80049b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ba:	4641      	mov	r1, r8
 80049bc:	008a      	lsls	r2, r1, #2
 80049be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049c2:	f7fb fc75 	bl	80002b0 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <UART_SetConfig+0x4e4>)
 80049cc:	fba3 1302 	umull	r1, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	2164      	movs	r1, #100	@ 0x64
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	3332      	adds	r3, #50	@ 0x32
 80049de:	4a08      	ldr	r2, [pc, #32]	@ (8004a00 <UART_SetConfig+0x4e4>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4422      	add	r2, r4
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049fa:	46bd      	mov	sp, r7
 80049fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a00:	51eb851f 	.word	0x51eb851f

08004a04 <siprintf>:
 8004a04:	b40e      	push	{r1, r2, r3}
 8004a06:	b500      	push	{lr}
 8004a08:	b09c      	sub	sp, #112	@ 0x70
 8004a0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a0c:	9002      	str	r0, [sp, #8]
 8004a0e:	9006      	str	r0, [sp, #24]
 8004a10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a14:	4809      	ldr	r0, [pc, #36]	@ (8004a3c <siprintf+0x38>)
 8004a16:	9107      	str	r1, [sp, #28]
 8004a18:	9104      	str	r1, [sp, #16]
 8004a1a:	4909      	ldr	r1, [pc, #36]	@ (8004a40 <siprintf+0x3c>)
 8004a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a20:	9105      	str	r1, [sp, #20]
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	a902      	add	r1, sp, #8
 8004a28:	f000 f9a2 	bl	8004d70 <_svfiprintf_r>
 8004a2c:	9b02      	ldr	r3, [sp, #8]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	b01c      	add	sp, #112	@ 0x70
 8004a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a38:	b003      	add	sp, #12
 8004a3a:	4770      	bx	lr
 8004a3c:	2000001c 	.word	0x2000001c
 8004a40:	ffff0208 	.word	0xffff0208

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <__errno>:
 8004a54:	4b01      	ldr	r3, [pc, #4]	@ (8004a5c <__errno+0x8>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	2000001c 	.word	0x2000001c

08004a60 <__libc_init_array>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4d0d      	ldr	r5, [pc, #52]	@ (8004a98 <__libc_init_array+0x38>)
 8004a64:	4c0d      	ldr	r4, [pc, #52]	@ (8004a9c <__libc_init_array+0x3c>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	42a6      	cmp	r6, r4
 8004a6e:	d109      	bne.n	8004a84 <__libc_init_array+0x24>
 8004a70:	4d0b      	ldr	r5, [pc, #44]	@ (8004aa0 <__libc_init_array+0x40>)
 8004a72:	4c0c      	ldr	r4, [pc, #48]	@ (8004aa4 <__libc_init_array+0x44>)
 8004a74:	f000 fc66 	bl	8005344 <_init>
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	d105      	bne.n	8004a8e <__libc_init_array+0x2e>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a88:	4798      	blx	r3
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7ee      	b.n	8004a6c <__libc_init_array+0xc>
 8004a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a92:	4798      	blx	r3
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7f2      	b.n	8004a7e <__libc_init_array+0x1e>
 8004a98:	080053e4 	.word	0x080053e4
 8004a9c:	080053e4 	.word	0x080053e4
 8004aa0:	080053e4 	.word	0x080053e4
 8004aa4:	080053e8 	.word	0x080053e8

08004aa8 <__retarget_lock_acquire_recursive>:
 8004aa8:	4770      	bx	lr

08004aaa <__retarget_lock_release_recursive>:
 8004aaa:	4770      	bx	lr

08004aac <memcpy>:
 8004aac:	440a      	add	r2, r1
 8004aae:	4291      	cmp	r1, r2
 8004ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab4:	d100      	bne.n	8004ab8 <memcpy+0xc>
 8004ab6:	4770      	bx	lr
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	d1f9      	bne.n	8004aba <memcpy+0xe>
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <_free_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4605      	mov	r5, r0
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d041      	beq.n	8004b54 <_free_r+0x8c>
 8004ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad4:	1f0c      	subs	r4, r1, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfb8      	it	lt
 8004ada:	18e4      	addlt	r4, r4, r3
 8004adc:	f000 f8e0 	bl	8004ca0 <__malloc_lock>
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b58 <_free_r+0x90>)
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	b933      	cbnz	r3, 8004af4 <_free_r+0x2c>
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6014      	str	r4, [r2, #0]
 8004aea:	4628      	mov	r0, r5
 8004aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af0:	f000 b8dc 	b.w	8004cac <__malloc_unlock>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d908      	bls.n	8004b0a <_free_r+0x42>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	1821      	adds	r1, r4, r0
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf01      	itttt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	1809      	addeq	r1, r1, r0
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	e7ed      	b.n	8004ae6 <_free_r+0x1e>
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b10b      	cbz	r3, 8004b14 <_free_r+0x4c>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d9fa      	bls.n	8004b0a <_free_r+0x42>
 8004b14:	6811      	ldr	r1, [r2, #0]
 8004b16:	1850      	adds	r0, r2, r1
 8004b18:	42a0      	cmp	r0, r4
 8004b1a:	d10b      	bne.n	8004b34 <_free_r+0x6c>
 8004b1c:	6820      	ldr	r0, [r4, #0]
 8004b1e:	4401      	add	r1, r0
 8004b20:	1850      	adds	r0, r2, r1
 8004b22:	4283      	cmp	r3, r0
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	d1e0      	bne.n	8004aea <_free_r+0x22>
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	6053      	str	r3, [r2, #4]
 8004b2e:	4408      	add	r0, r1
 8004b30:	6010      	str	r0, [r2, #0]
 8004b32:	e7da      	b.n	8004aea <_free_r+0x22>
 8004b34:	d902      	bls.n	8004b3c <_free_r+0x74>
 8004b36:	230c      	movs	r3, #12
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	e7d6      	b.n	8004aea <_free_r+0x22>
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	1821      	adds	r1, r4, r0
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf04      	itt	eq
 8004b44:	6819      	ldreq	r1, [r3, #0]
 8004b46:	685b      	ldreq	r3, [r3, #4]
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	bf04      	itt	eq
 8004b4c:	1809      	addeq	r1, r1, r0
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	6054      	str	r4, [r2, #4]
 8004b52:	e7ca      	b.n	8004aea <_free_r+0x22>
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
 8004b56:	bf00      	nop
 8004b58:	20000308 	.word	0x20000308

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b9c <sbrk_aligned+0x40>)
 8004b60:	460c      	mov	r4, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	4605      	mov	r5, r0
 8004b66:	b911      	cbnz	r1, 8004b6e <sbrk_aligned+0x12>
 8004b68:	f000 fba6 	bl	80052b8 <_sbrk_r>
 8004b6c:	6030      	str	r0, [r6, #0]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 fba1 	bl	80052b8 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d103      	bne.n	8004b82 <sbrk_aligned+0x26>
 8004b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b7e:	4620      	mov	r0, r4
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	1cc4      	adds	r4, r0, #3
 8004b84:	f024 0403 	bic.w	r4, r4, #3
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d0f8      	beq.n	8004b7e <sbrk_aligned+0x22>
 8004b8c:	1a21      	subs	r1, r4, r0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 fb92 	bl	80052b8 <_sbrk_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d1f2      	bne.n	8004b7e <sbrk_aligned+0x22>
 8004b98:	e7ef      	b.n	8004b7a <sbrk_aligned+0x1e>
 8004b9a:	bf00      	nop
 8004b9c:	20000304 	.word	0x20000304

08004ba0 <_malloc_r>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	1ccd      	adds	r5, r1, #3
 8004ba6:	f025 0503 	bic.w	r5, r5, #3
 8004baa:	3508      	adds	r5, #8
 8004bac:	2d0c      	cmp	r5, #12
 8004bae:	bf38      	it	cc
 8004bb0:	250c      	movcc	r5, #12
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	db01      	blt.n	8004bbc <_malloc_r+0x1c>
 8004bb8:	42a9      	cmp	r1, r5
 8004bba:	d904      	bls.n	8004bc6 <_malloc_r+0x26>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	6033      	str	r3, [r6, #0]
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c9c <_malloc_r+0xfc>
 8004bca:	f000 f869 	bl	8004ca0 <__malloc_lock>
 8004bce:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd2:	461c      	mov	r4, r3
 8004bd4:	bb44      	cbnz	r4, 8004c28 <_malloc_r+0x88>
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff ffbf 	bl	8004b5c <sbrk_aligned>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	4604      	mov	r4, r0
 8004be2:	d158      	bne.n	8004c96 <_malloc_r+0xf6>
 8004be4:	f8d8 4000 	ldr.w	r4, [r8]
 8004be8:	4627      	mov	r7, r4
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d143      	bne.n	8004c76 <_malloc_r+0xd6>
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	d04b      	beq.n	8004c8a <_malloc_r+0xea>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	4639      	mov	r1, r7
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	eb04 0903 	add.w	r9, r4, r3
 8004bfc:	f000 fb5c 	bl	80052b8 <_sbrk_r>
 8004c00:	4581      	cmp	r9, r0
 8004c02:	d142      	bne.n	8004c8a <_malloc_r+0xea>
 8004c04:	6821      	ldr	r1, [r4, #0]
 8004c06:	1a6d      	subs	r5, r5, r1
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff ffa6 	bl	8004b5c <sbrk_aligned>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d03a      	beq.n	8004c8a <_malloc_r+0xea>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	442b      	add	r3, r5
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	bb62      	cbnz	r2, 8004c7c <_malloc_r+0xdc>
 8004c22:	f8c8 7000 	str.w	r7, [r8]
 8004c26:	e00f      	b.n	8004c48 <_malloc_r+0xa8>
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	1b52      	subs	r2, r2, r5
 8004c2c:	d420      	bmi.n	8004c70 <_malloc_r+0xd0>
 8004c2e:	2a0b      	cmp	r2, #11
 8004c30:	d917      	bls.n	8004c62 <_malloc_r+0xc2>
 8004c32:	1961      	adds	r1, r4, r5
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	6025      	str	r5, [r4, #0]
 8004c38:	bf18      	it	ne
 8004c3a:	6059      	strne	r1, [r3, #4]
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	bf08      	it	eq
 8004c40:	f8c8 1000 	streq.w	r1, [r8]
 8004c44:	5162      	str	r2, [r4, r5]
 8004c46:	604b      	str	r3, [r1, #4]
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 f82f 	bl	8004cac <__malloc_unlock>
 8004c4e:	f104 000b 	add.w	r0, r4, #11
 8004c52:	1d23      	adds	r3, r4, #4
 8004c54:	f020 0007 	bic.w	r0, r0, #7
 8004c58:	1ac2      	subs	r2, r0, r3
 8004c5a:	bf1c      	itt	ne
 8004c5c:	1a1b      	subne	r3, r3, r0
 8004c5e:	50a3      	strne	r3, [r4, r2]
 8004c60:	e7af      	b.n	8004bc2 <_malloc_r+0x22>
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	bf0c      	ite	eq
 8004c68:	f8c8 2000 	streq.w	r2, [r8]
 8004c6c:	605a      	strne	r2, [r3, #4]
 8004c6e:	e7eb      	b.n	8004c48 <_malloc_r+0xa8>
 8004c70:	4623      	mov	r3, r4
 8004c72:	6864      	ldr	r4, [r4, #4]
 8004c74:	e7ae      	b.n	8004bd4 <_malloc_r+0x34>
 8004c76:	463c      	mov	r4, r7
 8004c78:	687f      	ldr	r7, [r7, #4]
 8004c7a:	e7b6      	b.n	8004bea <_malloc_r+0x4a>
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d1fb      	bne.n	8004c7c <_malloc_r+0xdc>
 8004c84:	2300      	movs	r3, #0
 8004c86:	6053      	str	r3, [r2, #4]
 8004c88:	e7de      	b.n	8004c48 <_malloc_r+0xa8>
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f000 f80c 	bl	8004cac <__malloc_unlock>
 8004c94:	e794      	b.n	8004bc0 <_malloc_r+0x20>
 8004c96:	6005      	str	r5, [r0, #0]
 8004c98:	e7d6      	b.n	8004c48 <_malloc_r+0xa8>
 8004c9a:	bf00      	nop
 8004c9c:	20000308 	.word	0x20000308

08004ca0 <__malloc_lock>:
 8004ca0:	4801      	ldr	r0, [pc, #4]	@ (8004ca8 <__malloc_lock+0x8>)
 8004ca2:	f7ff bf01 	b.w	8004aa8 <__retarget_lock_acquire_recursive>
 8004ca6:	bf00      	nop
 8004ca8:	20000300 	.word	0x20000300

08004cac <__malloc_unlock>:
 8004cac:	4801      	ldr	r0, [pc, #4]	@ (8004cb4 <__malloc_unlock+0x8>)
 8004cae:	f7ff befc 	b.w	8004aaa <__retarget_lock_release_recursive>
 8004cb2:	bf00      	nop
 8004cb4:	20000300 	.word	0x20000300

08004cb8 <__ssputs_r>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	688e      	ldr	r6, [r1, #8]
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	42be      	cmp	r6, r7
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4690      	mov	r8, r2
 8004cca:	d82d      	bhi.n	8004d28 <__ssputs_r+0x70>
 8004ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cd4:	d026      	beq.n	8004d24 <__ssputs_r+0x6c>
 8004cd6:	6965      	ldr	r5, [r4, #20]
 8004cd8:	6909      	ldr	r1, [r1, #16]
 8004cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cde:	eba3 0901 	sub.w	r9, r3, r1
 8004ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce6:	1c7b      	adds	r3, r7, #1
 8004ce8:	444b      	add	r3, r9
 8004cea:	106d      	asrs	r5, r5, #1
 8004cec:	429d      	cmp	r5, r3
 8004cee:	bf38      	it	cc
 8004cf0:	461d      	movcc	r5, r3
 8004cf2:	0553      	lsls	r3, r2, #21
 8004cf4:	d527      	bpl.n	8004d46 <__ssputs_r+0x8e>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7ff ff52 	bl	8004ba0 <_malloc_r>
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	b360      	cbz	r0, 8004d5a <__ssputs_r+0xa2>
 8004d00:	6921      	ldr	r1, [r4, #16]
 8004d02:	464a      	mov	r2, r9
 8004d04:	f7ff fed2 	bl	8004aac <memcpy>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	6126      	str	r6, [r4, #16]
 8004d16:	6165      	str	r5, [r4, #20]
 8004d18:	444e      	add	r6, r9
 8004d1a:	eba5 0509 	sub.w	r5, r5, r9
 8004d1e:	6026      	str	r6, [r4, #0]
 8004d20:	60a5      	str	r5, [r4, #8]
 8004d22:	463e      	mov	r6, r7
 8004d24:	42be      	cmp	r6, r7
 8004d26:	d900      	bls.n	8004d2a <__ssputs_r+0x72>
 8004d28:	463e      	mov	r6, r7
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4641      	mov	r1, r8
 8004d30:	f000 faa8 	bl	8005284 <memmove>
 8004d34:	68a3      	ldr	r3, [r4, #8]
 8004d36:	1b9b      	subs	r3, r3, r6
 8004d38:	60a3      	str	r3, [r4, #8]
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4433      	add	r3, r6
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	2000      	movs	r0, #0
 8004d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d46:	462a      	mov	r2, r5
 8004d48:	f000 fac6 	bl	80052d8 <_realloc_r>
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d1e0      	bne.n	8004d14 <__ssputs_r+0x5c>
 8004d52:	6921      	ldr	r1, [r4, #16]
 8004d54:	4650      	mov	r0, sl
 8004d56:	f7ff feb7 	bl	8004ac8 <_free_r>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	f8ca 3000 	str.w	r3, [sl]
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	e7e9      	b.n	8004d42 <__ssputs_r+0x8a>
	...

08004d70 <_svfiprintf_r>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	4698      	mov	r8, r3
 8004d76:	898b      	ldrh	r3, [r1, #12]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	b09d      	sub	sp, #116	@ 0x74
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	460d      	mov	r5, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	d510      	bpl.n	8004da6 <_svfiprintf_r+0x36>
 8004d84:	690b      	ldr	r3, [r1, #16]
 8004d86:	b973      	cbnz	r3, 8004da6 <_svfiprintf_r+0x36>
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	f7ff ff09 	bl	8004ba0 <_malloc_r>
 8004d8e:	6028      	str	r0, [r5, #0]
 8004d90:	6128      	str	r0, [r5, #16]
 8004d92:	b930      	cbnz	r0, 8004da2 <_svfiprintf_r+0x32>
 8004d94:	230c      	movs	r3, #12
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b01d      	add	sp, #116	@ 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	2340      	movs	r3, #64	@ 0x40
 8004da4:	616b      	str	r3, [r5, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004daa:	2320      	movs	r3, #32
 8004dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db4:	2330      	movs	r3, #48	@ 0x30
 8004db6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f54 <_svfiprintf_r+0x1e4>
 8004dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dca:	b10a      	cbz	r2, 8004dd0 <_svfiprintf_r+0x60>
 8004dcc:	2a25      	cmp	r2, #37	@ 0x25
 8004dce:	d1f9      	bne.n	8004dc4 <_svfiprintf_r+0x54>
 8004dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd4:	d00b      	beq.n	8004dee <_svfiprintf_r+0x7e>
 8004dd6:	465b      	mov	r3, fp
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ff6b 	bl	8004cb8 <__ssputs_r>
 8004de2:	3001      	adds	r0, #1
 8004de4:	f000 80a7 	beq.w	8004f36 <_svfiprintf_r+0x1c6>
 8004de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dea:	445a      	add	r2, fp
 8004dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 809f 	beq.w	8004f36 <_svfiprintf_r+0x1c6>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e02:	f10a 0a01 	add.w	sl, sl, #1
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	9307      	str	r3, [sp, #28]
 8004e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e10:	4654      	mov	r4, sl
 8004e12:	2205      	movs	r2, #5
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	484e      	ldr	r0, [pc, #312]	@ (8004f54 <_svfiprintf_r+0x1e4>)
 8004e1a:	f7fb f9f9 	bl	8000210 <memchr>
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	b9d8      	cbnz	r0, 8004e5a <_svfiprintf_r+0xea>
 8004e22:	06d0      	lsls	r0, r2, #27
 8004e24:	bf44      	itt	mi
 8004e26:	2320      	movmi	r3, #32
 8004e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e2c:	0711      	lsls	r1, r2, #28
 8004e2e:	bf44      	itt	mi
 8004e30:	232b      	movmi	r3, #43	@ 0x2b
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e3c:	d015      	beq.n	8004e6a <_svfiprintf_r+0xfa>
 8004e3e:	9a07      	ldr	r2, [sp, #28]
 8004e40:	4654      	mov	r4, sl
 8004e42:	2000      	movs	r0, #0
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4e:	3b30      	subs	r3, #48	@ 0x30
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d94b      	bls.n	8004eec <_svfiprintf_r+0x17c>
 8004e54:	b1b0      	cbz	r0, 8004e84 <_svfiprintf_r+0x114>
 8004e56:	9207      	str	r2, [sp, #28]
 8004e58:	e014      	b.n	8004e84 <_svfiprintf_r+0x114>
 8004e5a:	eba0 0308 	sub.w	r3, r0, r8
 8004e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	46a2      	mov	sl, r4
 8004e68:	e7d2      	b.n	8004e10 <_svfiprintf_r+0xa0>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbb      	ittet	lt
 8004e76:	425b      	neglt	r3, r3
 8004e78:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7c:	9307      	strge	r3, [sp, #28]
 8004e7e:	9307      	strlt	r3, [sp, #28]
 8004e80:	bfb8      	it	lt
 8004e82:	9204      	strlt	r2, [sp, #16]
 8004e84:	7823      	ldrb	r3, [r4, #0]
 8004e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e88:	d10a      	bne.n	8004ea0 <_svfiprintf_r+0x130>
 8004e8a:	7863      	ldrb	r3, [r4, #1]
 8004e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e8e:	d132      	bne.n	8004ef6 <_svfiprintf_r+0x186>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9203      	str	r2, [sp, #12]
 8004e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e9c:	3402      	adds	r4, #2
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f64 <_svfiprintf_r+0x1f4>
 8004ea4:	7821      	ldrb	r1, [r4, #0]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f7fb f9b1 	bl	8000210 <memchr>
 8004eae:	b138      	cbz	r0, 8004ec0 <_svfiprintf_r+0x150>
 8004eb0:	9b04      	ldr	r3, [sp, #16]
 8004eb2:	eba0 000a 	sub.w	r0, r0, sl
 8004eb6:	2240      	movs	r2, #64	@ 0x40
 8004eb8:	4082      	lsls	r2, r0
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	3401      	adds	r4, #1
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	4824      	ldr	r0, [pc, #144]	@ (8004f58 <_svfiprintf_r+0x1e8>)
 8004ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eca:	2206      	movs	r2, #6
 8004ecc:	f7fb f9a0 	bl	8000210 <memchr>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d036      	beq.n	8004f42 <_svfiprintf_r+0x1d2>
 8004ed4:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <_svfiprintf_r+0x1ec>)
 8004ed6:	bb1b      	cbnz	r3, 8004f20 <_svfiprintf_r+0x1b0>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	3307      	adds	r3, #7
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee6:	4433      	add	r3, r6
 8004ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eea:	e76a      	b.n	8004dc2 <_svfiprintf_r+0x52>
 8004eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e7a8      	b.n	8004e48 <_svfiprintf_r+0xd8>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	3401      	adds	r4, #1
 8004efa:	9305      	str	r3, [sp, #20]
 8004efc:	4619      	mov	r1, r3
 8004efe:	f04f 0c0a 	mov.w	ip, #10
 8004f02:	4620      	mov	r0, r4
 8004f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f08:	3a30      	subs	r2, #48	@ 0x30
 8004f0a:	2a09      	cmp	r2, #9
 8004f0c:	d903      	bls.n	8004f16 <_svfiprintf_r+0x1a6>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0c6      	beq.n	8004ea0 <_svfiprintf_r+0x130>
 8004f12:	9105      	str	r1, [sp, #20]
 8004f14:	e7c4      	b.n	8004ea0 <_svfiprintf_r+0x130>
 8004f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e7f0      	b.n	8004f02 <_svfiprintf_r+0x192>
 8004f20:	ab03      	add	r3, sp, #12
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	462a      	mov	r2, r5
 8004f26:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <_svfiprintf_r+0x1f0>)
 8004f28:	a904      	add	r1, sp, #16
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	f3af 8000 	nop.w
 8004f30:	1c42      	adds	r2, r0, #1
 8004f32:	4606      	mov	r6, r0
 8004f34:	d1d6      	bne.n	8004ee4 <_svfiprintf_r+0x174>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	065b      	lsls	r3, r3, #25
 8004f3a:	f53f af2d 	bmi.w	8004d98 <_svfiprintf_r+0x28>
 8004f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f40:	e72c      	b.n	8004d9c <_svfiprintf_r+0x2c>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <_svfiprintf_r+0x1f0>)
 8004f4a:	a904      	add	r1, sp, #16
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f000 f879 	bl	8005044 <_printf_i>
 8004f52:	e7ed      	b.n	8004f30 <_svfiprintf_r+0x1c0>
 8004f54:	080053a8 	.word	0x080053a8
 8004f58:	080053b2 	.word	0x080053b2
 8004f5c:	00000000 	.word	0x00000000
 8004f60:	08004cb9 	.word	0x08004cb9
 8004f64:	080053ae 	.word	0x080053ae

08004f68 <_printf_common>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	4698      	mov	r8, r3
 8004f70:	688a      	ldr	r2, [r1, #8]
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bfb8      	it	lt
 8004f7c:	4613      	movlt	r3, r2
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f84:	4607      	mov	r7, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	b10a      	cbz	r2, 8004f8e <_printf_common+0x26>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	0699      	lsls	r1, r3, #26
 8004f92:	bf42      	ittt	mi
 8004f94:	6833      	ldrmi	r3, [r6, #0]
 8004f96:	3302      	addmi	r3, #2
 8004f98:	6033      	strmi	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	f015 0506 	ands.w	r5, r5, #6
 8004fa0:	d106      	bne.n	8004fb0 <_printf_common+0x48>
 8004fa2:	f104 0a19 	add.w	sl, r4, #25
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	6832      	ldr	r2, [r6, #0]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dc26      	bgt.n	8004ffe <_printf_common+0x96>
 8004fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	3b00      	subs	r3, #0
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d42b      	bmi.n	8005018 <_printf_common+0xb0>
 8004fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c8      	blx	r9
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d01e      	beq.n	800500c <_printf_common+0xa4>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf02      	ittt	eq
 8004fda:	68e5      	ldreq	r5, [r4, #12]
 8004fdc:	6833      	ldreq	r3, [r6, #0]
 8004fde:	1aed      	subeq	r5, r5, r3
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	bf0c      	ite	eq
 8004fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe8:	2500      	movne	r5, #0
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bfc4      	itt	gt
 8004fee:	1a9b      	subgt	r3, r3, r2
 8004ff0:	18ed      	addgt	r5, r5, r3
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	42b5      	cmp	r5, r6
 8004ff8:	d11a      	bne.n	8005030 <_printf_common+0xc8>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e008      	b.n	8005010 <_printf_common+0xa8>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4652      	mov	r2, sl
 8005002:	4641      	mov	r1, r8
 8005004:	4638      	mov	r0, r7
 8005006:	47c8      	blx	r9
 8005008:	3001      	adds	r0, #1
 800500a:	d103      	bne.n	8005014 <_printf_common+0xac>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	3501      	adds	r5, #1
 8005016:	e7c6      	b.n	8004fa6 <_printf_common+0x3e>
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	2030      	movs	r0, #48	@ 0x30
 800501e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005022:	4422      	add	r2, r4
 8005024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800502c:	3302      	adds	r3, #2
 800502e:	e7c7      	b.n	8004fc0 <_printf_common+0x58>
 8005030:	2301      	movs	r3, #1
 8005032:	4622      	mov	r2, r4
 8005034:	4641      	mov	r1, r8
 8005036:	4638      	mov	r0, r7
 8005038:	47c8      	blx	r9
 800503a:	3001      	adds	r0, #1
 800503c:	d0e6      	beq.n	800500c <_printf_common+0xa4>
 800503e:	3601      	adds	r6, #1
 8005040:	e7d9      	b.n	8004ff6 <_printf_common+0x8e>
	...

08005044 <_printf_i>:
 8005044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	7e0f      	ldrb	r7, [r1, #24]
 800504a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800504c:	2f78      	cmp	r7, #120	@ 0x78
 800504e:	4691      	mov	r9, r2
 8005050:	4680      	mov	r8, r0
 8005052:	460c      	mov	r4, r1
 8005054:	469a      	mov	sl, r3
 8005056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800505a:	d807      	bhi.n	800506c <_printf_i+0x28>
 800505c:	2f62      	cmp	r7, #98	@ 0x62
 800505e:	d80a      	bhi.n	8005076 <_printf_i+0x32>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f000 80d2 	beq.w	800520a <_printf_i+0x1c6>
 8005066:	2f58      	cmp	r7, #88	@ 0x58
 8005068:	f000 80b9 	beq.w	80051de <_printf_i+0x19a>
 800506c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005074:	e03a      	b.n	80050ec <_printf_i+0xa8>
 8005076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800507a:	2b15      	cmp	r3, #21
 800507c:	d8f6      	bhi.n	800506c <_printf_i+0x28>
 800507e:	a101      	add	r1, pc, #4	@ (adr r1, 8005084 <_printf_i+0x40>)
 8005080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050f1 	.word	0x080050f1
 800508c:	0800506d 	.word	0x0800506d
 8005090:	0800506d 	.word	0x0800506d
 8005094:	0800506d 	.word	0x0800506d
 8005098:	0800506d 	.word	0x0800506d
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	0800506d 	.word	0x0800506d
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	080051f1 	.word	0x080051f1
 80050b4:	0800511b 	.word	0x0800511b
 80050b8:	080051ab 	.word	0x080051ab
 80050bc:	0800506d 	.word	0x0800506d
 80050c0:	0800506d 	.word	0x0800506d
 80050c4:	08005213 	.word	0x08005213
 80050c8:	0800506d 	.word	0x0800506d
 80050cc:	0800511b 	.word	0x0800511b
 80050d0:	0800506d 	.word	0x0800506d
 80050d4:	0800506d 	.word	0x0800506d
 80050d8:	080051b3 	.word	0x080051b3
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6032      	str	r2, [r6, #0]
 80050e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09d      	b.n	800522c <_printf_i+0x1e8>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	6031      	str	r1, [r6, #0]
 80050f8:	0606      	lsls	r6, r0, #24
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0xbc>
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	e003      	b.n	8005108 <_printf_i+0xc4>
 8005100:	0645      	lsls	r5, r0, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0xb8>
 8005104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_i+0xd0>
 800510c:	232d      	movs	r3, #45	@ 0x2d
 800510e:	426d      	negs	r5, r5
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005114:	4859      	ldr	r0, [pc, #356]	@ (800527c <_printf_i+0x238>)
 8005116:	230a      	movs	r3, #10
 8005118:	e011      	b.n	800513e <_printf_i+0xfa>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	0608      	lsls	r0, r1, #24
 8005120:	f853 5b04 	ldr.w	r5, [r3], #4
 8005124:	d402      	bmi.n	800512c <_printf_i+0xe8>
 8005126:	0649      	lsls	r1, r1, #25
 8005128:	bf48      	it	mi
 800512a:	b2ad      	uxthmi	r5, r5
 800512c:	2f6f      	cmp	r7, #111	@ 0x6f
 800512e:	4853      	ldr	r0, [pc, #332]	@ (800527c <_printf_i+0x238>)
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	bf14      	ite	ne
 8005134:	230a      	movne	r3, #10
 8005136:	2308      	moveq	r3, #8
 8005138:	2100      	movs	r1, #0
 800513a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513e:	6866      	ldr	r6, [r4, #4]
 8005140:	60a6      	str	r6, [r4, #8]
 8005142:	2e00      	cmp	r6, #0
 8005144:	bfa2      	ittt	ge
 8005146:	6821      	ldrge	r1, [r4, #0]
 8005148:	f021 0104 	bicge.w	r1, r1, #4
 800514c:	6021      	strge	r1, [r4, #0]
 800514e:	b90d      	cbnz	r5, 8005154 <_printf_i+0x110>
 8005150:	2e00      	cmp	r6, #0
 8005152:	d04b      	beq.n	80051ec <_printf_i+0x1a8>
 8005154:	4616      	mov	r6, r2
 8005156:	fbb5 f1f3 	udiv	r1, r5, r3
 800515a:	fb03 5711 	mls	r7, r3, r1, r5
 800515e:	5dc7      	ldrb	r7, [r0, r7]
 8005160:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005164:	462f      	mov	r7, r5
 8005166:	42bb      	cmp	r3, r7
 8005168:	460d      	mov	r5, r1
 800516a:	d9f4      	bls.n	8005156 <_printf_i+0x112>
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10b      	bne.n	8005188 <_printf_i+0x144>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07df      	lsls	r7, r3, #31
 8005174:	d508      	bpl.n	8005188 <_printf_i+0x144>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6861      	ldr	r1, [r4, #4]
 800517a:	4299      	cmp	r1, r3
 800517c:	bfde      	ittt	le
 800517e:	2330      	movle	r3, #48	@ 0x30
 8005180:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005184:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005188:	1b92      	subs	r2, r2, r6
 800518a:	6122      	str	r2, [r4, #16]
 800518c:	f8cd a000 	str.w	sl, [sp]
 8005190:	464b      	mov	r3, r9
 8005192:	aa03      	add	r2, sp, #12
 8005194:	4621      	mov	r1, r4
 8005196:	4640      	mov	r0, r8
 8005198:	f7ff fee6 	bl	8004f68 <_printf_common>
 800519c:	3001      	adds	r0, #1
 800519e:	d14a      	bne.n	8005236 <_printf_i+0x1f2>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	b004      	add	sp, #16
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f043 0320 	orr.w	r3, r3, #32
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	4833      	ldr	r0, [pc, #204]	@ (8005280 <_printf_i+0x23c>)
 80051b4:	2778      	movs	r7, #120	@ 0x78
 80051b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	6831      	ldr	r1, [r6, #0]
 80051be:	061f      	lsls	r7, r3, #24
 80051c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80051c4:	d402      	bmi.n	80051cc <_printf_i+0x188>
 80051c6:	065f      	lsls	r7, r3, #25
 80051c8:	bf48      	it	mi
 80051ca:	b2ad      	uxthmi	r5, r5
 80051cc:	6031      	str	r1, [r6, #0]
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	bf44      	itt	mi
 80051d2:	f043 0320 	orrmi.w	r3, r3, #32
 80051d6:	6023      	strmi	r3, [r4, #0]
 80051d8:	b11d      	cbz	r5, 80051e2 <_printf_i+0x19e>
 80051da:	2310      	movs	r3, #16
 80051dc:	e7ac      	b.n	8005138 <_printf_i+0xf4>
 80051de:	4827      	ldr	r0, [pc, #156]	@ (800527c <_printf_i+0x238>)
 80051e0:	e7e9      	b.n	80051b6 <_printf_i+0x172>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f023 0320 	bic.w	r3, r3, #32
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	e7f6      	b.n	80051da <_printf_i+0x196>
 80051ec:	4616      	mov	r6, r2
 80051ee:	e7bd      	b.n	800516c <_printf_i+0x128>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	6961      	ldr	r1, [r4, #20]
 80051f6:	1d18      	adds	r0, r3, #4
 80051f8:	6030      	str	r0, [r6, #0]
 80051fa:	062e      	lsls	r6, r5, #24
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0x1c0>
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	e002      	b.n	800520a <_printf_i+0x1c6>
 8005204:	0668      	lsls	r0, r5, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0x1bc>
 8005208:	8019      	strh	r1, [r3, #0]
 800520a:	2300      	movs	r3, #0
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	4616      	mov	r6, r2
 8005210:	e7bc      	b.n	800518c <_printf_i+0x148>
 8005212:	6833      	ldr	r3, [r6, #0]
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	6032      	str	r2, [r6, #0]
 8005218:	681e      	ldr	r6, [r3, #0]
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	2100      	movs	r1, #0
 800521e:	4630      	mov	r0, r6
 8005220:	f7fa fff6 	bl	8000210 <memchr>
 8005224:	b108      	cbz	r0, 800522a <_printf_i+0x1e6>
 8005226:	1b80      	subs	r0, r0, r6
 8005228:	6060      	str	r0, [r4, #4]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	2300      	movs	r3, #0
 8005230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005234:	e7aa      	b.n	800518c <_printf_i+0x148>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d0ad      	beq.n	80051a0 <_printf_i+0x15c>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	079b      	lsls	r3, r3, #30
 8005248:	d413      	bmi.n	8005272 <_printf_i+0x22e>
 800524a:	68e0      	ldr	r0, [r4, #12]
 800524c:	9b03      	ldr	r3, [sp, #12]
 800524e:	4298      	cmp	r0, r3
 8005250:	bfb8      	it	lt
 8005252:	4618      	movlt	r0, r3
 8005254:	e7a6      	b.n	80051a4 <_printf_i+0x160>
 8005256:	2301      	movs	r3, #1
 8005258:	4632      	mov	r2, r6
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	47d0      	blx	sl
 8005260:	3001      	adds	r0, #1
 8005262:	d09d      	beq.n	80051a0 <_printf_i+0x15c>
 8005264:	3501      	adds	r5, #1
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	9903      	ldr	r1, [sp, #12]
 800526a:	1a5b      	subs	r3, r3, r1
 800526c:	42ab      	cmp	r3, r5
 800526e:	dcf2      	bgt.n	8005256 <_printf_i+0x212>
 8005270:	e7eb      	b.n	800524a <_printf_i+0x206>
 8005272:	2500      	movs	r5, #0
 8005274:	f104 0619 	add.w	r6, r4, #25
 8005278:	e7f5      	b.n	8005266 <_printf_i+0x222>
 800527a:	bf00      	nop
 800527c:	080053b9 	.word	0x080053b9
 8005280:	080053ca 	.word	0x080053ca

08005284 <memmove>:
 8005284:	4288      	cmp	r0, r1
 8005286:	b510      	push	{r4, lr}
 8005288:	eb01 0402 	add.w	r4, r1, r2
 800528c:	d902      	bls.n	8005294 <memmove+0x10>
 800528e:	4284      	cmp	r4, r0
 8005290:	4623      	mov	r3, r4
 8005292:	d807      	bhi.n	80052a4 <memmove+0x20>
 8005294:	1e43      	subs	r3, r0, #1
 8005296:	42a1      	cmp	r1, r4
 8005298:	d008      	beq.n	80052ac <memmove+0x28>
 800529a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052a2:	e7f8      	b.n	8005296 <memmove+0x12>
 80052a4:	4402      	add	r2, r0
 80052a6:	4601      	mov	r1, r0
 80052a8:	428a      	cmp	r2, r1
 80052aa:	d100      	bne.n	80052ae <memmove+0x2a>
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b6:	e7f7      	b.n	80052a8 <memmove+0x24>

080052b8 <_sbrk_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	@ (80052d4 <_sbrk_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fb ffd0 	bl	8001268 <_sbrk>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_sbrk_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_sbrk_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200002fc 	.word	0x200002fc

080052d8 <_realloc_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4680      	mov	r8, r0
 80052de:	4615      	mov	r5, r2
 80052e0:	460c      	mov	r4, r1
 80052e2:	b921      	cbnz	r1, 80052ee <_realloc_r+0x16>
 80052e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052e8:	4611      	mov	r1, r2
 80052ea:	f7ff bc59 	b.w	8004ba0 <_malloc_r>
 80052ee:	b92a      	cbnz	r2, 80052fc <_realloc_r+0x24>
 80052f0:	f7ff fbea 	bl	8004ac8 <_free_r>
 80052f4:	2400      	movs	r4, #0
 80052f6:	4620      	mov	r0, r4
 80052f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fc:	f000 f81a 	bl	8005334 <_malloc_usable_size_r>
 8005300:	4285      	cmp	r5, r0
 8005302:	4606      	mov	r6, r0
 8005304:	d802      	bhi.n	800530c <_realloc_r+0x34>
 8005306:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800530a:	d8f4      	bhi.n	80052f6 <_realloc_r+0x1e>
 800530c:	4629      	mov	r1, r5
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fc46 	bl	8004ba0 <_malloc_r>
 8005314:	4607      	mov	r7, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d0ec      	beq.n	80052f4 <_realloc_r+0x1c>
 800531a:	42b5      	cmp	r5, r6
 800531c:	462a      	mov	r2, r5
 800531e:	4621      	mov	r1, r4
 8005320:	bf28      	it	cs
 8005322:	4632      	movcs	r2, r6
 8005324:	f7ff fbc2 	bl	8004aac <memcpy>
 8005328:	4621      	mov	r1, r4
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fbcc 	bl	8004ac8 <_free_r>
 8005330:	463c      	mov	r4, r7
 8005332:	e7e0      	b.n	80052f6 <_realloc_r+0x1e>

08005334 <_malloc_usable_size_r>:
 8005334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005338:	1f18      	subs	r0, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfbc      	itt	lt
 800533e:	580b      	ldrlt	r3, [r1, r0]
 8005340:	18c0      	addlt	r0, r0, r3
 8005342:	4770      	bx	lr

08005344 <_init>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr

08005350 <_fini>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr
