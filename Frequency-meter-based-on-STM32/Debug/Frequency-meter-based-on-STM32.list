
Frequency-meter-based-on-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004048  08004048  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004050  08004050  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004050  08004050  00005050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004054  08004054  00005054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004058  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000001c  08004074  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004074  00006190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daa2  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d6  00000000  00000000  00013aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00015dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b76  00000000  00000000  00016c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b8  00000000  00000000  000177e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012433  00000000  00000000  00038f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb8d  00000000  00000000  0004b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  00118fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0011cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ffc 	.word	0x08003ffc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08003ffc 	.word	0x08003ffc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004fe:	4a38      	ldr	r2, [pc, #224]	@ (80005e0 <HD44780_Init+0xec>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000504:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <HD44780_Init+0xf0>)
 8000506:	2208      	movs	r2, #8
 8000508:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800050a:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <HD44780_Init+0xf4>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000510:	4b33      	ldr	r3, [pc, #204]	@ (80005e0 <HD44780_Init+0xec>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d907      	bls.n	8000528 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000518:	4b33      	ldr	r3, [pc, #204]	@ (80005e8 <HD44780_Init+0xf4>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <HD44780_Init+0xf4>)
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e006      	b.n	8000536 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000528:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <HD44780_Init+0xf4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <HD44780_Init+0xf4>)
 8000534:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000536:	f000 f993 	bl	8000860 <DelayInit>
  HAL_Delay(50);
 800053a:	2032      	movs	r0, #50	@ 0x32
 800053c:	f000 fe28 	bl	8001190 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <HD44780_Init+0xf0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f951 	bl	80007ec <ExpanderWrite>
  HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054e:	f000 fe1f 	bl	8001190 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000552:	2030      	movs	r0, #48	@ 0x30
 8000554:	f000 f938 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000558:	f241 1094 	movw	r0, #4500	@ 0x1194
 800055c:	f000 f9aa 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 8000560:	2030      	movs	r0, #48	@ 0x30
 8000562:	f000 f931 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000566:	f241 1094 	movw	r0, #4500	@ 0x1194
 800056a:	f000 f9a3 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 800056e:	2030      	movs	r0, #48	@ 0x30
 8000570:	f000 f92a 	bl	80007c8 <Write4Bits>
  DelayUS(4500);
 8000574:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000578:	f000 f99c 	bl	80008b4 <DelayUS>

  Write4Bits(0x02 << 4);
 800057c:	2020      	movs	r0, #32
 800057e:	f000 f923 	bl	80007c8 <Write4Bits>
  DelayUS(100);
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f000 f996 	bl	80008b4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <HD44780_Init+0xf4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f8db 	bl	800074e <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <HD44780_Init+0xf8>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800059e:	f000 f875 	bl	800068c <HD44780_Display>
  HD44780_Clear();
 80005a2:	f000 f82b 	bl	80005fc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HD44780_Init+0xfc>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005ac:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <HD44780_Init+0xfc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8c9 	bl	800074e <SendCommand>
  DelayUS(4500);
 80005bc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005c0:	f000 f978 	bl	80008b4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005c4:	490b      	ldr	r1, [pc, #44]	@ (80005f4 <HD44780_Init+0x100>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f876 	bl	80006b8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005cc:	490a      	ldr	r1, [pc, #40]	@ (80005f8 <HD44780_Init+0x104>)
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f872 	bl	80006b8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005d4:	f000 f81d 	bl	8000612 <HD44780_Home>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000003b 	.word	0x2000003b
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000038 	.word	0x20000038
 80005ec:	20000039 	.word	0x20000039
 80005f0:	2000003a 	.word	0x2000003a
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008

080005fc <HD44780_Clear>:

void HD44780_Clear()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f8a4 	bl	800074e <SendCommand>
  DelayUS(2000);
 8000606:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800060a:	f000 f953 	bl	80008b4 <DelayUS>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <HD44780_Home>:

void HD44780_Home()
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000616:	2002      	movs	r0, #2
 8000618:	f000 f899 	bl	800074e <SendCommand>
  DelayUS(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000620:	f000 f948 	bl	80008b4 <DelayUS>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HD44780_SetCursor+0x5c>)
 800063a:	f107 0408 	add.w	r4, r7, #8
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <HD44780_SetCursor+0x60>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	429a      	cmp	r2, r3
 800064c:	d303      	bcc.n	8000656 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HD44780_SetCursor+0x60>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	3318      	adds	r3, #24
 800065c:	443b      	add	r3, r7
 800065e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4413      	add	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f86a 	bl	800074e <SendCommand>
}
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	bf00      	nop
 8000684:	08004014 	.word	0x08004014
 8000688:	2000003b 	.word	0x2000003b

0800068c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HD44780_Display+0x28>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HD44780_Display+0x28>)
 800069c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HD44780_Display+0x28>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f850 	bl	800074e <SendCommand>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000039 	.word	0x20000039

080006b8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f837 	bl	800074e <SendCommand>
  for (int i=0; i<8; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e009      	b.n	80006fa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f83b 	bl	800076a <SendChar>
  for (int i=0; i<8; i++)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	ddf2      	ble.n	80006e6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f827 	bl	800076a <SendChar>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072c:	e006      	b.n	800073c <HD44780_PrintStr+0x18>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f817 	bl	800076a <SendChar>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <HD44780_PrintStr+0xa>
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f812 	bl	8000786 <Send>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SendChar>:

static void SendChar(uint8_t ch)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f804 	bl	8000786 <Send>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	460a      	mov	r2, r1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4613      	mov	r3, r2
 8000794:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f023 030f 	bic.w	r3, r3, #15
 800079c:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f80b 	bl	80007c8 <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f804 	bl	80007c8 <Write4Bits>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f809 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f821 	bl	8000824 <PulseEnable>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	@ 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	@ (8000820 <ExpanderWrite+0x34>)
 8000810:	f001 fc3c 	bl	800208c <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000003c 	.word	0x2000003c
 8000820:	20000040 	.word	0x20000040

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f839 	bl	80008b4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82f 	bl	80008b4 <DelayUS>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <DelayInit+0x4c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <DelayInit+0x4c>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <DelayInit+0x4c>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <DelayInit+0x4c>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <DelayInit+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <DelayInit+0x50>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <DelayInit+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <DelayInit+0x50>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <DelayInit+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000edf0 	.word	0xe000edf0
 80008b0:	e0001000 	.word	0xe0001000

080008b4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <DelayUS+0x44>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <DelayUS+0x48>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9a      	lsrs	r2, r3, #18
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <DelayUS+0x4c>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <DelayUS+0x4c>)
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f6      	bhi.n	80008d6 <DelayUS+0x22>
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000010 	.word	0x20000010
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	e0001000 	.word	0xe0001000

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fbd0 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f81a 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f92e 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000914:	f000 f90c 	bl	8000b30 <MX_DMA_Init>
  MX_TIM1_Init();
 8000918:	f000 f8b4 	bl	8000a84 <MX_TIM1_Init>
  MX_I2C1_Init();
 800091c:	f000 f884 	bl	8000a28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HD44780_Init(2);
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fde7 	bl	80004f4 <HD44780_Init>
  HD44780_Clear();
 8000926:	f7ff fe69 	bl	80005fc <HD44780_Clear>
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) Buffer, BUFFER_SIZE);
 800092a:	2310      	movs	r3, #16
 800092c:	4a03      	ldr	r2, [pc, #12]	@ (800093c <main+0x38>)
 800092e:	2100      	movs	r1, #0
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <main+0x3c>)
 8000932:	f002 fd79 	bl	8003428 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
  while (1)
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <main+0x32>
 800093a:	bf00      	nop
 800093c:	2000013c 	.word	0x2000013c
 8000940:	20000094 	.word	0x20000094

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2234      	movs	r2, #52	@ 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fb26 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <SystemClock_Config+0xdc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <SystemClock_Config+0xdc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	@ 0x40
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <SystemClock_Config+0xdc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <SystemClock_Config+0xe0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <SystemClock_Config+0xe0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <SystemClock_Config+0xe0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009b8:	23b4      	movs	r3, #180	@ 0xb4
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fa3d 	bl	8002e4c <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d8:	f000 f90e 	bl	8000bf8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009dc:	f001 feb0 	bl	8002740 <HAL_PWREx_EnableOverDrive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009e6:	f000 f907 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2105      	movs	r1, #5
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fee9 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a14:	f000 f8f0 	bl	8000bf8 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	@ 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f001 f9cd 	bl	8001e04 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f8c2 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000040 	.word	0x20000040
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <MX_TIM1_Init+0xa8>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000aa8:	22b3      	movs	r2, #179	@ 0xb3
 8000aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000acc:	4816      	ldr	r0, [pc, #88]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000ace:	f002 fc5b 	bl	8003388 <HAL_TIM_IC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f000 f88e 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000aec:	f003 f9de 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000af6:	f000 f87f 	bl	8000bf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_TIM1_Init+0xa4>)
 8000b12:	f002 fe33 	bl	800377c <HAL_TIM_IC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000b1c:	f000 f86c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000094 	.word	0x20000094
 8000b2c:	40010000 	.word	0x40010000

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_DMA_Init+0x3c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2039      	movs	r0, #57	@ 0x39
 8000b58:	f000 fc19 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b5c:	2039      	movs	r0, #57	@ 0x39
 8000b5e:	f000 fc32 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_GPIO_Init+0x84>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f000 fb98 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	@ (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12c      	bne.n	8000cd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cb0:	f000 ff14 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	@ 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a32      	ldr	r2, [pc, #200]	@ (8000dcc <HAL_TIM_IC_MspInit+0xe8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d15e      	bne.n	8000dc4 <HAL_TIM_IC_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a30      	ldr	r2, [pc, #192]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xec>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481e      	ldr	r0, [pc, #120]	@ (8000dd4 <HAL_TIM_IC_MspInit+0xf0>)
 8000d5c:	f000 febe 	bl	8001adc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d62:	4a1e      	ldr	r2, [pc, #120]	@ (8000ddc <HAL_TIM_IC_MspInit+0xf8>)
 8000d64:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d68:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d98:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000d9c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000da0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000da8:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000daa:	f000 fb27 	bl	80013fc <HAL_DMA_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_TIM_IC_MspInit+0xd4>
    {
      Error_Handler();
 8000db4:	f7ff ff20 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_TIM_IC_MspInit+0xf4>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	200000dc 	.word	0x200000dc
 8000ddc:	40026428 	.word	0x40026428

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <NMI_Handler+0x4>

08000de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <MemManage_Handler+0x4>

08000df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f98b 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	466b      	mov	r3, sp
 8000e4a:	461e      	mov	r6, r3
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	  Frequency = 0;
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	  f_lenght  = 0;
 8000e52:	4b6f      	ldr	r3, [pc, #444]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i<HALF_BUFFER_SIZE;i++ ){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e032      	b.n	8000ec4 <DMA2_Stream1_IRQHandler+0x84>
		  IC_Val1=Buffer[2*i];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4a6c      	ldr	r2, [pc, #432]	@ (8001014 <DMA2_Stream1_IRQHandler+0x1d4>)
 8000e64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e68:	4b6b      	ldr	r3, [pc, #428]	@ (8001018 <DMA2_Stream1_IRQHandler+0x1d8>)
 8000e6a:	801a      	strh	r2, [r3, #0]
		  IC_Val2=Buffer[2*i+1];
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a68      	ldr	r2, [pc, #416]	@ (8001014 <DMA2_Stream1_IRQHandler+0x1d4>)
 8000e74:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e78:	4b68      	ldr	r3, [pc, #416]	@ (800101c <DMA2_Stream1_IRQHandler+0x1dc>)
 8000e7a:	801a      	strh	r2, [r3, #0]
		  if (IC_Val2 > IC_Val1){
 8000e7c:	4b67      	ldr	r3, [pc, #412]	@ (800101c <DMA2_Stream1_IRQHandler+0x1dc>)
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	4b65      	ldr	r3, [pc, #404]	@ (8001018 <DMA2_Stream1_IRQHandler+0x1d8>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d90c      	bls.n	8000ea2 <DMA2_Stream1_IRQHandler+0x62>
			  Frequency += (uint32_t)(IC_Val2-IC_Val1);
 8000e88:	4b64      	ldr	r3, [pc, #400]	@ (800101c <DMA2_Stream1_IRQHandler+0x1dc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b62      	ldr	r3, [pc, #392]	@ (8001018 <DMA2_Stream1_IRQHandler+0x1d8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b5d      	ldr	r3, [pc, #372]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a5b      	ldr	r2, [pc, #364]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e00d      	b.n	8000ebe <DMA2_Stream1_IRQHandler+0x7e>
		  }else{
			  Frequency += (uint32_t)((0xffff - IC_Val1) + IC_Val2);
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8001018 <DMA2_Stream1_IRQHandler+0x1d8>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000eaa:	33ff      	adds	r3, #255	@ 0xff
 8000eac:	4a5b      	ldr	r2, [pc, #364]	@ (800101c <DMA2_Stream1_IRQHandler+0x1dc>)
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b55      	ldr	r3, [pc, #340]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a54      	ldr	r2, [pc, #336]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000ebc:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i<HALF_BUFFER_SIZE;i++ ){
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b07      	cmp	r3, #7
 8000ec8:	ddc9      	ble.n	8000e5e <DMA2_Stream1_IRQHandler+0x1e>
		  }
	  }
	  Frequency >>= 3;
 8000eca:	4b50      	ldr	r3, [pc, #320]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000ed2:	6013      	str	r3, [r2, #0]
	  Frequency = (1000000/Frequency)+10000;
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	@ (8001020 <DMA2_Stream1_IRQHandler+0x1e0>)
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	4a49      	ldr	r2, [pc, #292]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000ee6:	6013      	str	r3, [r2, #0]
	  temp = Frequency;
 8000ee8:	4b48      	ldr	r3, [pc, #288]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <DMA2_Stream1_IRQHandler+0x1e4>)
 8000eee:	6013      	str	r3, [r2, #0]
	  HD44780_Clear();
 8000ef0:	f7ff fb84 	bl	80005fc <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fb96 	bl	8000628 <HD44780_SetCursor>
	  while (temp){
 8000efc:	e00d      	b.n	8000f1a <DMA2_Stream1_IRQHandler+0xda>
		  temp /= 10;
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <DMA2_Stream1_IRQHandler+0x1e4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <DMA2_Stream1_IRQHandler+0x1e8>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <DMA2_Stream1_IRQHandler+0x1e4>)
 8000f0c:	6013      	str	r3, [r2, #0]
		  f_lenght++;
 8000f0e:	4b40      	ldr	r3, [pc, #256]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000f18:	701a      	strb	r2, [r3, #0]
	  while (temp){
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <DMA2_Stream1_IRQHandler+0x1e4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ed      	bne.n	8000efe <DMA2_Stream1_IRQHandler+0xbe>
	  }
	  uint32_t send_Buff[f_lenght];
 8000f22:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000f24:	7819      	ldrb	r1, [r3, #0]
 8000f26:	460b      	mov	r3, r1
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	b2cb      	uxtb	r3, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4698      	mov	r8, r3
 8000f32:	4691      	mov	r9, r2
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f40:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f44:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f48:	b2cb      	uxtb	r3, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	4615      	mov	r5, r2
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	016b      	lsls	r3, r5, #5
 8000f5a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f5e:	0162      	lsls	r2, r4, #5
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	3307      	adds	r3, #7
 8000f66:	08db      	lsrs	r3, r3, #3
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f6e:	466b      	mov	r3, sp
 8000f70:	3303      	adds	r3, #3
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < f_lenght; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e019      	b.n	8000fb2 <DMA2_Stream1_IRQHandler+0x172>
		  send_Buff[i] = Frequency % 10;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <DMA2_Stream1_IRQHandler+0x1e8>)
 8000f84:	fba3 2301 	umull	r2, r3, r3, r1
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	1aca      	subs	r2, r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6939      	ldr	r1, [r7, #16]
 8000f98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		  Frequency /= 10;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <DMA2_Stream1_IRQHandler+0x1e8>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	4a18      	ldr	r2, [pc, #96]	@ (800100c <DMA2_Stream1_IRQHandler+0x1cc>)
 8000faa:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < f_lenght; i++){
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dbdf      	blt.n	8000f7e <DMA2_Stream1_IRQHandler+0x13e>
	  }
	  for (int i = 0; i < f_lenght; i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e010      	b.n	8000fe6 <DMA2_Stream1_IRQHandler+0x1a6>
		  HD44780_PrintSpecialChar(send_Buff[f_lenght-1-i]+48);
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad2      	subs	r2, r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3330      	adds	r3, #48	@ 0x30
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb95 	bl	800070a <HD44780_PrintSpecialChar>
	  for (int i = 0; i < f_lenght; i++){
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <DMA2_Stream1_IRQHandler+0x1d0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	dbe8      	blt.n	8000fc4 <DMA2_Stream1_IRQHandler+0x184>
	  }
	  HD44780_PrintStr("HZ");
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <DMA2_Stream1_IRQHandler+0x1ec>)
 8000ff4:	f7ff fb96 	bl	8000724 <HD44780_PrintStr>
	  //HAL_Delay(1);

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <DMA2_Stream1_IRQHandler+0x1f0>)
 8000ffa:	f000 fb05 	bl	8001608 <HAL_DMA_IRQHandler>
 8000ffe:	46b5      	mov	sp, r6
  //	  (&hdma_tim1_ch1)->StreamBaseAddress->IFCR = DMA_FLAG_TCIF0_4 << (&hdma_tim1_ch1)->StreamIndex;
  //	  (&hdma_tim1_ch1)->Instance->NDTR = BUFFER_SIZE;
  //	  (&hdma_tim1_ch1)->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
  //	  __HAL_DMA_ENABLE(&hdma_tim1_ch1);
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800100a:	bf00      	nop
 800100c:	20000180 	.word	0x20000180
 8001010:	20000184 	.word	0x20000184
 8001014:	2000013c 	.word	0x2000013c
 8001018:	2000017c 	.word	0x2000017c
 800101c:	2000017e 	.word	0x2000017e
 8001020:	000f4240 	.word	0x000f4240
 8001024:	20000188 	.word	0x20000188
 8001028:	cccccccd 	.word	0xcccccccd
 800102c:	08004024 	.word	0x08004024
 8001030:	200000dc 	.word	0x200000dc

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 ff95 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fc3b 	bl	8000904 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800109c:	08004058 	.word	0x08004058
  ldr r2, =_sbss
 80010a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80010a4:	20000190 	.word	0x20000190

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f94f 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fd90 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f967 	bl	80013e2 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f92f 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	@ (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000010 	.word	0x20000010
 8001148:	20000018 	.word	0x20000018
 800114c:	20000014 	.word	0x20000014

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000018 	.word	0x20000018
 8001174:	2000018c 	.word	0x2000018c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000018c 	.word	0x2000018c

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000018 	.word	0x20000018

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff29 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff3e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff31 	bl	800123c <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff feb6 	bl	8001178 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e099      	b.n	800154c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001438:	e00f      	b.n	800145a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143a:	f7ff fe9d 	bl	8001178 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b05      	cmp	r3, #5
 8001446:	d908      	bls.n	800145a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e078      	b.n	800154c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e8      	bne.n	800143a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <HAL_DMA_Init+0x158>)
 8001474:	4013      	ands	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	4313      	orrs	r3, r2
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f023 0307 	bic.w	r3, r3, #7
 80014da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d117      	bne.n	800151e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00e      	beq.n	800151e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fa6f 	bl	80019e4 <DMA_CheckFifoParam>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2240      	movs	r2, #64	@ 0x40
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800151a:	2301      	movs	r3, #1
 800151c:	e016      	b.n	800154c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fa26 	bl	8001978 <DMA_CalcBaseAndBitshift>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001534:	223f      	movs	r2, #63	@ 0x3f
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f010803f 	.word	0xf010803f

08001558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_DMA_Start_IT+0x26>
 800157a:	2302      	movs	r3, #2
 800157c:	e040      	b.n	8001600 <HAL_DMA_Start_IT+0xa8>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d12f      	bne.n	80015f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f9b8 	bl	800191c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	223f      	movs	r2, #63	@ 0x3f
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0216 	orr.w	r2, r2, #22
 80015c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0208 	orr.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e005      	b.n	80015fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015fa:	2302      	movs	r3, #2
 80015fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001614:	4b8e      	ldr	r3, [pc, #568]	@ (8001850 <HAL_DMA_IRQHandler+0x248>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a8e      	ldr	r2, [pc, #568]	@ (8001854 <HAL_DMA_IRQHandler+0x24c>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0a9b      	lsrs	r3, r3, #10
 8001620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	2208      	movs	r2, #8
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01a      	beq.n	8001674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0204 	bic.w	r2, r2, #4
 800165a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001660:	2208      	movs	r2, #8
 8001662:	409a      	lsls	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001678:	2201      	movs	r2, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d012      	beq.n	80016aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	2201      	movs	r2, #1
 8001698:	409a      	lsls	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	f043 0202 	orr.w	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ae:	2204      	movs	r2, #4
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d012      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016cc:	2204      	movs	r2, #4
 80016ce:	409a      	lsls	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d8:	f043 0204 	orr.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	2210      	movs	r2, #16
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d043      	beq.n	8001778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03c      	beq.n	8001778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001702:	2210      	movs	r2, #16
 8001704:	409a      	lsls	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d018      	beq.n	800174a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d024      	beq.n	8001778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	4798      	blx	r3
 8001736:	e01f      	b.n	8001778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
 8001748:	e016      	b.n	8001778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0208 	bic.w	r2, r2, #8
 8001766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	2220      	movs	r2, #32
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 808f 	beq.w	80018a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8087 	beq.w	80018a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179e:	2220      	movs	r2, #32
 80017a0:	409a      	lsls	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d136      	bne.n	8001820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0216 	bic.w	r2, r2, #22
 80017c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_DMA_IRQHandler+0x1da>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0208 	bic.w	r2, r2, #8
 80017f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	223f      	movs	r2, #63	@ 0x3f
 80017f8:	409a      	lsls	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001812:	2b00      	cmp	r3, #0
 8001814:	d07e      	beq.n	8001914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
        }
        return;
 800181e:	e079      	b.n	8001914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01d      	beq.n	800186a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10d      	bne.n	8001858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	2b00      	cmp	r3, #0
 8001842:	d031      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
 800184c:	e02c      	b.n	80018a8 <HAL_DMA_IRQHandler+0x2a0>
 800184e:	bf00      	nop
 8001850:	20000010 	.word	0x20000010
 8001854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
 8001868:	e01e      	b.n	80018a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0210 	bic.w	r2, r2, #16
 8001886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d032      	beq.n	8001916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d022      	beq.n	8001902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2205      	movs	r2, #5
 80018c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d307      	bcc.n	80018f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f2      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x2cc>
 80018ee:	e000      	b.n	80018f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
 8001912:	e000      	b.n	8001916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001914:	bf00      	nop
    }
  }
}
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b40      	cmp	r3, #64	@ 0x40
 8001948:	d108      	bne.n	800195c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800195a:	e007      	b.n	800196c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3b10      	subs	r3, #16
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <DMA_CalcBaseAndBitshift+0x64>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001992:	4a13      	ldr	r2, [pc, #76]	@ (80019e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d909      	bls.n	80019ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	1d1a      	adds	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80019b8:	e007      	b.n	80019ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	aaaaaaab 	.word	0xaaaaaaab
 80019e0:	08004040 	.word	0x08004040

080019e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11f      	bne.n	8001a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d856      	bhi.n	8001ab2 <DMA_CheckFifoParam+0xce>
 8001a04:	a201      	add	r2, pc, #4	@ (adr r2, 8001a0c <DMA_CheckFifoParam+0x28>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a2f 	.word	0x08001a2f
 8001a14:	08001a1d 	.word	0x08001a1d
 8001a18:	08001ab3 	.word	0x08001ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d046      	beq.n	8001ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2c:	e043      	b.n	8001ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a36:	d140      	bne.n	8001aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3c:	e03d      	b.n	8001aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a46:	d121      	bne.n	8001a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d837      	bhi.n	8001abe <DMA_CheckFifoParam+0xda>
 8001a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <DMA_CheckFifoParam+0x70>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a6b 	.word	0x08001a6b
 8001a5c:	08001a65 	.word	0x08001a65
 8001a60:	08001a7d 	.word	0x08001a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
      break;
 8001a68:	e030      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d025      	beq.n	8001ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a7a:	e022      	b.n	8001ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a84:	d11f      	bne.n	8001ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a8a:	e01c      	b.n	8001ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d903      	bls.n	8001a9a <DMA_CheckFifoParam+0xb6>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d003      	beq.n	8001aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a98:	e018      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a9e:	e015      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00e      	beq.n	8001aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab0:	e00b      	b.n	8001aca <DMA_CheckFifoParam+0xe6>
      break;
 8001ab2:	bf00      	nop
 8001ab4:	e00a      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;
 8001ab6:	bf00      	nop
 8001ab8:	e008      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;
 8001aba:	bf00      	nop
 8001abc:	e006      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e004      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e002      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <DMA_CheckFifoParam+0xe8>
      break;
 8001aca:	bf00      	nop
    }
  } 
  
  return status; 
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	@ 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e165      	b.n	8001dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8154 	bne.w	8001dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d017      	beq.n	8001bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d123      	bne.n	8001c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80ae 	beq.w	8001dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b5d      	ldr	r3, [pc, #372]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b5a      	ldr	r3, [pc, #360]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7e:	4a58      	ldr	r2, [pc, #352]	@ (8001de0 <HAL_GPIO_Init+0x304>)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8001de4 <HAL_GPIO_Init+0x308>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d025      	beq.n	8001cf6 <HAL_GPIO_Init+0x21a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4e      	ldr	r2, [pc, #312]	@ (8001de8 <HAL_GPIO_Init+0x30c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x216>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001dec <HAL_GPIO_Init+0x310>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x212>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001df0 <HAL_GPIO_Init+0x314>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x20e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001df4 <HAL_GPIO_Init+0x318>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x20a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8001df8 <HAL_GPIO_Init+0x31c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a49      	ldr	r2, [pc, #292]	@ (8001dfc <HAL_GPIO_Init+0x320>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x202>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e00c      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00a      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x21c>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	@ (8001de0 <HAL_GPIO_Init+0x304>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a31      	ldr	r2, [pc, #196]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6a:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db8:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f ae96 	bls.w	8001af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40013c00 	.word	0x40013c00

08001e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e12b      	b.n	800206e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe ff12 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e68:	f000 fdac 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a81      	ldr	r2, [pc, #516]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d807      	bhi.n	8001e88 <HAL_I2C_Init+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a80      	ldr	r2, [pc, #512]	@ (800207c <HAL_I2C_Init+0x278>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e006      	b.n	8001e96 <HAL_I2C_Init+0x92>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002080 <HAL_I2C_Init+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0e7      	b.n	800206e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a78      	ldr	r2, [pc, #480]	@ (8002084 <HAL_I2C_Init+0x280>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_I2C_Init+0xd4>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e009      	b.n	8001eec <HAL_I2C_Init+0xe8>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a69      	ldr	r2, [pc, #420]	@ (8002088 <HAL_I2C_Init+0x284>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	3301      	adds	r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	495c      	ldr	r1, [pc, #368]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d819      	bhi.n	8001f40 <HAL_I2C_Init+0x13c>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e59      	subs	r1, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_I2C_Init+0x138>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e59      	subs	r1, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	e051      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e04f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d111      	bne.n	8001f6c <HAL_I2C_Init+0x168>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e012      	b.n	8001f92 <HAL_I2C_Init+0x18e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x196>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e022      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_I2C_Init+0x1bc>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e58      	subs	r0, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	0099      	lsls	r1, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6809      	ldr	r1, [r1, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800200e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6911      	ldr	r1, [r2, #16]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	000186a0 	.word	0x000186a0
 800207c:	001e847f 	.word	0x001e847f
 8002080:	003d08ff 	.word	0x003d08ff
 8002084:	431bde83 	.word	0x431bde83
 8002088:	10624dd3 	.word	0x10624dd3

0800208c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff f86a 	bl	8001178 <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	f040 80e0 	bne.w	8002274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2319      	movs	r3, #25
 80020ba:	2201      	movs	r2, #1
 80020bc:	4970      	ldr	r1, [pc, #448]	@ (8002280 <HAL_I2C_Master_Transmit+0x1f4>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f964 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0d3      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x50>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0cc      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d007      	beq.n	8002102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2221      	movs	r2, #33	@ 0x21
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2210      	movs	r2, #16
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a50      	ldr	r2, [pc, #320]	@ (8002284 <HAL_I2C_Master_Transmit+0x1f8>)
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f89c 	bl	8002288 <I2C_MasterRequestWrite>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08d      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002170:	e066      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa22 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	2b04      	cmp	r3, #4
 8002188:	d107      	bne.n	800219a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11b      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x188>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d017      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	6a39      	ldr	r1, [r7, #32]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa19 	bl	8002650 <I2C_WaitOnBTFFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	2b04      	cmp	r3, #4
 800222a:	d107      	bne.n	800223c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e01a      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d194      	bne.n	8002172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	00100002 	.word	0x00100002
 8002284:	ffff0000 	.word	0xffff0000

08002288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	460b      	mov	r3, r1
 8002296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d006      	beq.n	80022b2 <I2C_MasterRequestWrite+0x2a>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d003      	beq.n	80022b2 <I2C_MasterRequestWrite+0x2a>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022b0:	d108      	bne.n	80022c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e00b      	b.n	80022dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d107      	bne.n	80022dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f84f 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002302:	d103      	bne.n	800230c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e035      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002318:	d108      	bne.n	800232c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e01b      	b.n	8002364 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	11db      	asrs	r3, r3, #7
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 0306 	and.w	r3, r3, #6
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f063 030f 	orn	r3, r3, #15
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <I2C_MasterRequestWrite+0xfc>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f898 	bl	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e010      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4907      	ldr	r1, [pc, #28]	@ (8002388 <I2C_MasterRequestWrite+0x100>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f888 	bl	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010008 	.word	0x00010008
 8002388:	00010002 	.word	0x00010002

0800238c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239c:	e048      	b.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d044      	beq.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7fe fee7 	bl	8001178 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d139      	bne.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10d      	bne.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	e00c      	b.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d116      	bne.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e023      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10d      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	43da      	mvns	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	e00c      	b.n	8002470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	43da      	mvns	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	429a      	cmp	r2, r3
 8002474:	d093      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248e:	e071      	b.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249e:	d123      	bne.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e067      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d041      	beq.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f0:	f7fe fe42 	bl	8001178 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d136      	bne.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10c      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4013      	ands	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e00b      	b.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	43da      	mvns	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e021      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	0c1b      	lsrs	r3, r3, #16
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10c      	bne.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	43da      	mvns	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e00b      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af6d 	bne.w	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025cc:	e034      	b.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f886 	bl	80026e0 <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e034      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d028      	beq.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7fe fdc7 	bl	8001178 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b80      	cmp	r3, #128	@ 0x80
 8002608:	d016      	beq.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e007      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d1c3      	bne.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800265c:	e034      	b.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f83e 	bl	80026e0 <I2C_IsAcknowledgeFailed>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e034      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d028      	beq.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe fd7f 	bl	8001178 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11d      	bne.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d016      	beq.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d1c3      	bne.n	800265e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f6:	d11b      	bne.n	8002730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f043 0204 	orr.w	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a1f      	ldr	r2, [pc, #124]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800276c:	f7fe fd04 	bl	8001178 <HAL_GetTick>
 8002770:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002772:	e009      	b.n	8002788 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002774:	f7fe fd00 	bl	8001178 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002782:	d901      	bls.n	8002788 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e01f      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002794:	d1ee      	bne.n	8002774 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800279c:	f7fe fcec 	bl	8001178 <HAL_GetTick>
 80027a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027a2:	e009      	b.n	80027b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027a4:	f7fe fce8 	bl	8001178 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b2:	d901      	bls.n	80027b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e007      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027c4:	d1ee      	bne.n	80027a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	420e0040 	.word	0x420e0040
 80027d8:	40007000 	.word	0x40007000
 80027dc:	420e0044 	.word	0x420e0044

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cc      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b68      	ldr	r3, [pc, #416]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d90c      	bls.n	800281c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a58      	ldr	r2, [pc, #352]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a52      	ldr	r2, [pc, #328]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d044      	beq.n	8002900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d119      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	2b03      	cmp	r3, #3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4934      	ldr	r1, [pc, #208]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d0:	f7fe fc52 	bl	8001178 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fe fc4e 	bl	8001178 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f841 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fbb2 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00
 800299c:	40023800 	.word	0x40023800
 80029a0:	08004028 	.word	0x08004028
 80029a4:	20000010 	.word	0x20000010
 80029a8:	20000014 	.word	0x20000014

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000010 	.word	0x20000010

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff0 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08004038 	.word	0x08004038

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b0ae      	sub	sp, #184	@ 0xb8
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a12:	4bcb      	ldr	r3, [pc, #812]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	f200 8206 	bhi.w	8002e2c <HAL_RCC_GetSysClockFreq+0x440>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a5d 	.word	0x08002a5d
 8002a2c:	08002e2d 	.word	0x08002e2d
 8002a30:	08002e2d 	.word	0x08002e2d
 8002a34:	08002e2d 	.word	0x08002e2d
 8002a38:	08002a65 	.word	0x08002a65
 8002a3c:	08002e2d 	.word	0x08002e2d
 8002a40:	08002e2d 	.word	0x08002e2d
 8002a44:	08002e2d 	.word	0x08002e2d
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002e2d 	.word	0x08002e2d
 8002a50:	08002e2d 	.word	0x08002e2d
 8002a54:	08002e2d 	.word	0x08002e2d
 8002a58:	08002c5d 	.word	0x08002c5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a62:	e1e7      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a64:	4bb8      	ldr	r3, [pc, #736]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a6a:	e1e3      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6c:	4bb4      	ldr	r3, [pc, #720]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a78:	4bb1      	ldr	r3, [pc, #708]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d071      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4bae      	ldr	r3, [pc, #696]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abc:	0150      	lsls	r0, r2, #5
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	1a51      	subs	r1, r2, r1
 8002ac6:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002adc:	4649      	mov	r1, r9
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	018a      	lsls	r2, r1, #6
 8002aea:	4641      	mov	r1, r8
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002af0:	4649      	mov	r1, r9
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b04:	4649      	mov	r1, r9
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4641      	mov	r1, r8
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4622      	mov	r2, r4
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b1e:	462b      	mov	r3, r5
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b34:	4629      	mov	r1, r5
 8002b36:	024b      	lsls	r3, r1, #9
 8002b38:	4621      	mov	r1, r4
 8002b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3e:	4621      	mov	r1, r4
 8002b40:	024a      	lsls	r2, r1, #9
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b58:	f7fd fb54 	bl	8000204 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b66:	e067      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b68:	4b75      	ldr	r3, [pc, #468]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b82:	2300      	movs	r3, #0
 8002b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4641      	mov	r1, r8
 8002bcc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bea:	4692      	mov	sl, r2
 8002bec:	469b      	mov	fp, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	028b      	lsls	r3, r1, #10
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c14:	4621      	mov	r1, r4
 8002c16:	028a      	lsls	r2, r1, #10
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c20:	2200      	movs	r2, #0
 8002c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c24:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c2a:	f7fd faeb 	bl	8000204 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c38:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c5a:	e0eb      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c68:	4b35      	ldr	r3, [pc, #212]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d06b      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c86:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c88:	2300      	movs	r3, #0
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c90:	4622      	mov	r2, r4
 8002c92:	462b      	mov	r3, r5
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0159      	lsls	r1, r3, #5
 8002c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca2:	0150      	lsls	r0, r2, #5
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4621      	mov	r1, r4
 8002caa:	1a51      	subs	r1, r2, r1
 8002cac:	61b9      	str	r1, [r7, #24]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cc2:	4659      	mov	r1, fp
 8002cc4:	018b      	lsls	r3, r1, #6
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ccc:	4651      	mov	r1, sl
 8002cce:	018a      	lsls	r2, r1, #6
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd6:	4659      	mov	r1, fp
 8002cd8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	4699      	mov	r9, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	eb18 0303 	adds.w	r3, r8, r3
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	eb49 0303 	adc.w	r3, r9, r3
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d10:	4629      	mov	r1, r5
 8002d12:	024b      	lsls	r3, r1, #9
 8002d14:	4621      	mov	r1, r4
 8002d16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	024a      	lsls	r2, r1, #9
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d26:	2200      	movs	r2, #0
 8002d28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d30:	f7fd fa68 	bl	8000204 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d3e:	e065      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x420>
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	2200      	movs	r2, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	4611      	mov	r1, r2
 8002d58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d5e:	2300      	movs	r3, #0
 8002d60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4641      	mov	r1, r8
 8002d80:	1a51      	subs	r1, r2, r1
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	4649      	mov	r1, r9
 8002d86:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da2:	4651      	mov	r1, sl
 8002da4:	018a      	lsls	r2, r1, #6
 8002da6:	4651      	mov	r1, sl
 8002da8:	1a54      	subs	r4, r2, r1
 8002daa:	4659      	mov	r1, fp
 8002dac:	eb63 0501 	sbc.w	r5, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	00eb      	lsls	r3, r5, #3
 8002dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dbe:	00e2      	lsls	r2, r4, #3
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	461d      	mov	r5, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	18e3      	adds	r3, r4, r3
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	464b      	mov	r3, r9
 8002dcc:	eb45 0303 	adc.w	r3, r5, r3
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dde:	4629      	mov	r1, r5
 8002de0:	028b      	lsls	r3, r1, #10
 8002de2:	4621      	mov	r1, r4
 8002de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de8:	4621      	mov	r1, r4
 8002dea:	028a      	lsls	r2, r1, #10
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002df4:	2200      	movs	r2, #0
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dfe:	f7fd fa01 	bl	8000204 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4613      	mov	r3, r2
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0f1b      	lsrs	r3, r3, #28
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e2a:	e003      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	37b8      	adds	r7, #184	@ 0xb8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400

08002e4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e28d      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8083 	beq.w	8002f72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e6c:	4b94      	ldr	r3, [pc, #592]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d019      	beq.n	8002eac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e78:	4b91      	ldr	r3, [pc, #580]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e84:	4b8e      	ldr	r3, [pc, #568]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e90:	d00c      	beq.n	8002eac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b8b      	ldr	r3, [pc, #556]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d112      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b84      	ldr	r3, [pc, #528]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05b      	beq.n	8002f70 <HAL_RCC_OscConfig+0x124>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d157      	bne.n	8002f70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e25a      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x90>
 8002ece:	4b7c      	ldr	r3, [pc, #496]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7b      	ldr	r2, [pc, #492]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0xcc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0xb4>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b73      	ldr	r3, [pc, #460]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a72      	ldr	r2, [pc, #456]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0xcc>
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6e      	ldr	r2, [pc, #440]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6b      	ldr	r2, [pc, #428]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f92a 	bl	8001178 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe f926 	bl	8001178 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e21f      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xdc>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f916 	bl	8001178 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe f912 	bl	8001178 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e20b      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	4b57      	ldr	r3, [pc, #348]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x104>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06f      	beq.n	800305e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f7e:	4b50      	ldr	r3, [pc, #320]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d017      	beq.n	8002fba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b44      	ldr	r3, [pc, #272]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x186>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1d3      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_OscConfig+0x278>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f8bf 	bl	8001178 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe f8bb 	bl	8001178 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1b4      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x278>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe f89e 	bl	8001178 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe f89a 	bl	8001178 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e193      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_RCC_OscConfig+0x27c>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe f87e 	bl	8001178 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe f87a 	bl	8001178 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e173      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x234>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_OscConfig+0x27c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe f867 	bl	8001178 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fe f863 	bl	8001178 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e15c      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b8a      	ldr	r3, [pc, #552]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b83      	ldr	r3, [pc, #524]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7f      	ldr	r3, [pc, #508]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a7e      	ldr	r2, [pc, #504]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b7c      	ldr	r3, [pc, #496]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe f823 	bl	8001178 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe f81f 	bl	8001178 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e118      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6c      	ldr	r3, [pc, #432]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x31e>
 800315c:	4b66      	ldr	r3, [pc, #408]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a65      	ldr	r2, [pc, #404]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x358>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x340>
 8003172:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a60      	ldr	r2, [pc, #384]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	4b5e      	ldr	r3, [pc, #376]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a5d      	ldr	r2, [pc, #372]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x358>
 800318c:	4b5a      	ldr	r3, [pc, #360]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a59      	ldr	r2, [pc, #356]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	4b57      	ldr	r3, [pc, #348]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a56      	ldr	r2, [pc, #344]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd ffe4 	bl	8001178 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd ffe0 	bl	8001178 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0d7      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x368>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd ffce 	bl	8001178 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd ffca 	bl	8001178 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0c1      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4a3a      	ldr	r2, [pc, #232]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80ad 	beq.w	8003378 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d060      	beq.n	80032ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d145      	bne.n	80032be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b33      	ldr	r3, [pc, #204]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd ff9e 	bl	8001178 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd ff9a 	bl	8001178 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e093      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd ff6f 	bl	8001178 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fd ff6b 	bl	8001178 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e064      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x452>
 80032bc:	e05c      	b.n	8003378 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd ff58 	bl	8001178 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd ff54 	bl	8001178 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04d      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x480>
 80032ea:	e045      	b.n	8003378 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e040      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
 8003300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003304:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <HAL_RCC_OscConfig+0x538>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d030      	beq.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d129      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d122      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800333a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d10f      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e041      	b.n	800341e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fc98 	bl	8000ce4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fb74 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Start_DMA+0x22>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e013      	b.n	8003472 <HAL_TIM_IC_Start_DMA+0x4a>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d104      	bne.n	800345a <HAL_TIM_IC_Start_DMA+0x32>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e00b      	b.n	8003472 <HAL_TIM_IC_Start_DMA+0x4a>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d104      	bne.n	800346a <HAL_TIM_IC_Start_DMA+0x42>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003466:	b2db      	uxtb	r3, r3
 8003468:	e003      	b.n	8003472 <HAL_TIM_IC_Start_DMA+0x4a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_TIM_IC_Start_DMA+0x5c>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e013      	b.n	80034ac <HAL_TIM_IC_Start_DMA+0x84>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d104      	bne.n	8003494 <HAL_TIM_IC_Start_DMA+0x6c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e00b      	b.n	80034ac <HAL_TIM_IC_Start_DMA+0x84>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d104      	bne.n	80034a4 <HAL_TIM_IC_Start_DMA+0x7c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e003      	b.n	80034ac <HAL_TIM_IC_Start_DMA+0x84>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d002      	beq.n	80034ba <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80034b4:	7d7b      	ldrb	r3, [r7, #21]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d101      	bne.n	80034be <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e146      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80034be:	7dbb      	ldrb	r3, [r7, #22]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d143      	bne.n	800354c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80034c4:	7d7b      	ldrb	r3, [r7, #21]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d140      	bne.n	800354c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_TIM_IC_Start_DMA+0xae>
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e138      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_DMA+0xc2>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_IC_Start_DMA+0xea>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_IC_Start_DMA+0xd2>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_IC_Start_DMA+0xea>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_IC_Start_DMA+0xe2>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_IC_Start_DMA+0xea>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_DMA+0xfa>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8003520:	e016      	b.n	8003550 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start_DMA+0x10a>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8003530:	e00e      	b.n	8003550 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_DMA+0x11a>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8003540:	e006      	b.n	8003550 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 800354a:	e001      	b.n	8003550 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0fd      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fc81 	bl	8003e60 <TIM_CCxChannelCmd>

  switch (Channel)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	f200 80ad 	bhi.w	80036c0 <HAL_TIM_IC_Start_DMA+0x298>
 8003566:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <HAL_TIM_IC_Start_DMA+0x144>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080036c1 	.word	0x080036c1
 8003574:	080036c1 	.word	0x080036c1
 8003578:	080036c1 	.word	0x080036c1
 800357c:	080035e9 	.word	0x080035e9
 8003580:	080036c1 	.word	0x080036c1
 8003584:	080036c1 	.word	0x080036c1
 8003588:	080036c1 	.word	0x080036c1
 800358c:	08003631 	.word	0x08003631
 8003590:	080036c1 	.word	0x080036c1
 8003594:	080036c1 	.word	0x080036c1
 8003598:	080036c1 	.word	0x080036c1
 800359c:	08003679 	.word	0x08003679
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003754 <HAL_TIM_IC_Start_DMA+0x32c>)
 80035a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_TIM_IC_Start_DMA+0x330>)
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	4a69      	ldr	r2, [pc, #420]	@ (800375c <HAL_TIM_IC_Start_DMA+0x334>)
 80035b6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3334      	adds	r3, #52	@ 0x34
 80035c2:	4619      	mov	r1, r3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	f7fd ffc6 	bl	8001558 <HAL_DMA_Start_IT>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0ba      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	60da      	str	r2, [r3, #12]
      break;
 80035e6:	e06e      	b.n	80036c6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	4a59      	ldr	r2, [pc, #356]	@ (8003754 <HAL_TIM_IC_Start_DMA+0x32c>)
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	4a58      	ldr	r2, [pc, #352]	@ (8003758 <HAL_TIM_IC_Start_DMA+0x330>)
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	4a57      	ldr	r2, [pc, #348]	@ (800375c <HAL_TIM_IC_Start_DMA+0x334>)
 80035fe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3338      	adds	r3, #56	@ 0x38
 800360a:	4619      	mov	r1, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	f7fd ffa2 	bl	8001558 <HAL_DMA_Start_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e096      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800362c:	60da      	str	r2, [r3, #12]
      break;
 800362e:	e04a      	b.n	80036c6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	4a47      	ldr	r2, [pc, #284]	@ (8003754 <HAL_TIM_IC_Start_DMA+0x32c>)
 8003636:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	4a46      	ldr	r2, [pc, #280]	@ (8003758 <HAL_TIM_IC_Start_DMA+0x330>)
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a45      	ldr	r2, [pc, #276]	@ (800375c <HAL_TIM_IC_Start_DMA+0x334>)
 8003646:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	333c      	adds	r3, #60	@ 0x3c
 8003652:	4619      	mov	r1, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	f7fd ff7e 	bl	8001558 <HAL_DMA_Start_IT>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e072      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003674:	60da      	str	r2, [r3, #12]
      break;
 8003676:	e026      	b.n	80036c6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	4a35      	ldr	r2, [pc, #212]	@ (8003754 <HAL_TIM_IC_Start_DMA+0x32c>)
 800367e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	4a34      	ldr	r2, [pc, #208]	@ (8003758 <HAL_TIM_IC_Start_DMA+0x330>)
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	4a33      	ldr	r2, [pc, #204]	@ (800375c <HAL_TIM_IC_Start_DMA+0x334>)
 800368e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3340      	adds	r3, #64	@ 0x40
 800369a:	4619      	mov	r1, r3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	f7fd ff5a 	bl	8001558 <HAL_DMA_Start_IT>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e04e      	b.n	800374c <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036bc:	60da      	str	r2, [r3, #12]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
      break;
 80036c4:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a25      	ldr	r2, [pc, #148]	@ (8003760 <HAL_TIM_IC_Start_DMA+0x338>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d01d      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <HAL_TIM_IC_Start_DMA+0x33c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003768 <HAL_TIM_IC_Start_DMA+0x340>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	@ (800376c <HAL_TIM_IC_Start_DMA+0x344>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003770 <HAL_TIM_IC_Start_DMA+0x348>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_TIM_IC_Start_DMA+0x34c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_IC_Start_DMA+0x2ee>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a19      	ldr	r2, [pc, #100]	@ (8003778 <HAL_TIM_IC_Start_DMA+0x350>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d010      	beq.n	800374a <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e007      	b.n	800374a <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08003983 	.word	0x08003983
 8003758:	08003a4b 	.word	0x08003a4b
 800375c:	080038f1 	.word	0x080038f1
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003796:	2302      	movs	r3, #2
 8003798:	e088      	b.n	80038ac <HAL_TIM_IC_ConfigChannel+0x130>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037b8:	f000 fa28 	bl	8003c0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020c 	bic.w	r2, r2, #12
 80037ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	619a      	str	r2, [r3, #24]
 80037de:	e060      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d11c      	bne.n	8003820 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037f6:	f000 fa7d 	bl	8003cf4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003808:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	e040      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11b      	bne.n	800385e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003836:	f000 fa9a 	bl	8003d6e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 020c 	bic.w	r2, r2, #12
 8003848:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
 800385c:	e021      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d11c      	bne.n	800389e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003874:	f000 fab7 	bl	8003de6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003886:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69d9      	ldr	r1, [r3, #28]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]
 800389c:	e001      	b.n	80038a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d107      	bne.n	8003918 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003916:	e02a      	b.n	800396e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	d107      	bne.n	8003932 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2202      	movs	r2, #2
 8003926:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003930:	e01d      	b.n	800396e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d107      	bne.n	800394c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2204      	movs	r2, #4
 8003940:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394a:	e010      	b.n	800396e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d107      	bne.n	8003966 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2208      	movs	r2, #8
 800395a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003964:	e003      	b.n	800396e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff ffb4 	bl	80038dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	771a      	strb	r2, [r3, #28]
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d10f      	bne.n	80039ba <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d146      	bne.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b8:	e03d      	b.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d10f      	bne.n	80039e4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d131      	bne.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e2:	e028      	b.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10f      	bne.n	8003a0e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2204      	movs	r2, #4
 80039f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11c      	bne.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a0c:	e013      	b.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d10e      	bne.n	8003a36 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ff3c 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	771a      	strb	r2, [r3, #28]
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d103      	bne.n	8003a6a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	771a      	strb	r2, [r3, #28]
 8003a68:	e019      	b.n	8003a9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d103      	bne.n	8003a7c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2202      	movs	r2, #2
 8003a78:	771a      	strb	r2, [r3, #28]
 8003a7a:	e010      	b.n	8003a9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d103      	bne.n	8003a8e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	771a      	strb	r2, [r3, #28]
 8003a8c:	e007      	b.n	8003a9e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d102      	bne.n	8003a9e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff ff12 	bl	80038c8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a46      	ldr	r2, [pc, #280]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad2:	d00f      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a43      	ldr	r2, [pc, #268]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <TIM_Base_SetConfig+0x134>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <TIM_Base_SetConfig+0x138>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a35      	ldr	r2, [pc, #212]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b14:	d027      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a32      	ldr	r2, [pc, #200]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d023      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <TIM_Base_SetConfig+0x134>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01f      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a30      	ldr	r2, [pc, #192]	@ (8003bec <TIM_Base_SetConfig+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d017      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf4 <TIM_Base_SetConfig+0x140>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <TIM_Base_SetConfig+0x144>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00f      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <TIM_Base_SetConfig+0x148>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2b      	ldr	r2, [pc, #172]	@ (8003c00 <TIM_Base_SetConfig+0x14c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <TIM_Base_SetConfig+0x150>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a29      	ldr	r2, [pc, #164]	@ (8003c08 <TIM_Base_SetConfig+0x154>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a10      	ldr	r2, [pc, #64]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0xf8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40010400 	.word	0x40010400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800
 8003c00:	40001800 	.word	0x40001800
 8003c04:	40001c00 	.word	0x40001c00
 8003c08:	40002000 	.word	0x40002000

08003c0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f023 0201 	bic.w	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a28      	ldr	r2, [pc, #160]	@ (8003cd8 <TIM_TI1_SetConfig+0xcc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01b      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c40:	d017      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <TIM_TI1_SetConfig+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <TIM_TI1_SetConfig+0xd4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00f      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a23      	ldr	r2, [pc, #140]	@ (8003ce4 <TIM_TI1_SetConfig+0xd8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ce8 <TIM_TI1_SetConfig+0xdc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <TIM_TI1_SetConfig+0xe0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_TI1_SetConfig+0x66>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a20      	ldr	r2, [pc, #128]	@ (8003cf0 <TIM_TI1_SetConfig+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <TIM_TI1_SetConfig+0x6a>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <TIM_TI1_SetConfig+0x6c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e003      	b.n	8003c96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f023 030a 	bic.w	r3, r3, #10
 8003cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 030a 	and.w	r3, r3, #10
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40010400 	.word	0x40010400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40001800 	.word	0x40001800

08003cf4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f023 0210 	bic.w	r2, r3, #16
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	031b      	lsls	r3, r3, #12
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b087      	sub	sp, #28
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	031b      	lsls	r3, r3, #12
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e05a      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d01d      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 f818 	bl	8003ffc <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004050 	.word	0x08004050
 8003ff0:	08004050 	.word	0x08004050
 8003ff4:	08004050 	.word	0x08004050
 8003ff8:	08004054 	.word	0x08004054

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
